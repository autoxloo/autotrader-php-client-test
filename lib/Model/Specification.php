<?php
/**
 * Specification
 *
 * PHP version 5
 *
 * @category Class
 * @package  AutoTrader\Client\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v2-listings service v2.0-listings
 *
 * AutoTrader REST service
 *
 * OpenAPI spec version: v2-listings
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AutoTrader\Client\Test\Model;

use \ArrayAccess;
use \AutoTrader\Client\Test\ObjectSerializer;

/**
 * Specification Class Doc Comment
 *
 * @category Class
 * @package  AutoTrader\Client\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Specification implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Specification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'vehicle_make' => 'string',
        'vehicle_model' => 'string',
        'vehicle_long_variant' => 'string',
        'model_body_shape' => 'string',
        'transmission_type' => 'string',
        'drive_type' => 'string',
        'fuel_type' => 'string',
        'engine_capacity' => '\AutoTrader\Client\Test\Model\NullableVolume',
        'number_of_doors' => 'int',
        'introduction_date' => '\DateTime',
        'discontinued_date' => '\DateTime',
        'tumm_code' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'vehicle_make' => null,
        'vehicle_model' => null,
        'vehicle_long_variant' => null,
        'model_body_shape' => null,
        'transmission_type' => null,
        'drive_type' => null,
        'fuel_type' => null,
        'engine_capacity' => null,
        'number_of_doors' => 'int32',
        'introduction_date' => 'date-time',
        'discontinued_date' => 'date-time',
        'tumm_code' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'vehicle_make' => 'vehicleMake',
        'vehicle_model' => 'vehicleModel',
        'vehicle_long_variant' => 'vehicleLongVariant',
        'model_body_shape' => 'modelBodyShape',
        'transmission_type' => 'transmissionType',
        'drive_type' => 'driveType',
        'fuel_type' => 'fuelType',
        'engine_capacity' => 'engineCapacity',
        'number_of_doors' => 'numberOfDoors',
        'introduction_date' => 'introductionDate',
        'discontinued_date' => 'discontinuedDate',
        'tumm_code' => 'tummCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'vehicle_make' => 'setVehicleMake',
        'vehicle_model' => 'setVehicleModel',
        'vehicle_long_variant' => 'setVehicleLongVariant',
        'model_body_shape' => 'setModelBodyShape',
        'transmission_type' => 'setTransmissionType',
        'drive_type' => 'setDriveType',
        'fuel_type' => 'setFuelType',
        'engine_capacity' => 'setEngineCapacity',
        'number_of_doors' => 'setNumberOfDoors',
        'introduction_date' => 'setIntroductionDate',
        'discontinued_date' => 'setDiscontinuedDate',
        'tumm_code' => 'setTummCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'vehicle_make' => 'getVehicleMake',
        'vehicle_model' => 'getVehicleModel',
        'vehicle_long_variant' => 'getVehicleLongVariant',
        'model_body_shape' => 'getModelBodyShape',
        'transmission_type' => 'getTransmissionType',
        'drive_type' => 'getDriveType',
        'fuel_type' => 'getFuelType',
        'engine_capacity' => 'getEngineCapacity',
        'number_of_doors' => 'getNumberOfDoors',
        'introduction_date' => 'getIntroductionDate',
        'discontinued_date' => 'getDiscontinuedDate',
        'tumm_code' => 'getTummCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSMISSION_TYPE_MANUAL = 'Manual';
    const TRANSMISSION_TYPE_AUTOMATIC = 'Automatic';
    const TRANSMISSION_TYPE_SEMI_AUTOMATIC = 'SemiAutomatic';
    const DRIVE_TYPE__4X2 = '_4x2';
    const DRIVE_TYPE__4X4 = '_4x4';
    const DRIVE_TYPE_ALL_WHEEL_DRIVE = 'AllWheelDrive';
    const DRIVE_TYPE_FRONT_WHEEL_DRIVE = 'FrontWheelDrive';
    const DRIVE_TYPE_REAR_WHEEL_DRIVE = 'RearWheelDrive';
    const DRIVE_TYPE_FOUR_WHEEL_DRIVE = 'FourWheelDrive';
    const FUEL_TYPE_PETROL = 'Petrol';
    const FUEL_TYPE_DIESEL = 'Diesel';
    const FUEL_TYPE_BIO_DIESEL = 'BioDiesel';
    const FUEL_TYPE_HYBRID = 'Hybrid';
    const FUEL_TYPE_ELECTRIC = 'Electric';
    const FUEL_TYPE_BI_FUEL = 'BiFuel';
    const FUEL_TYPE_LPG = 'LPG';
    const FUEL_TYPE_LNG = 'LNG';
    const FUEL_TYPE_CNG = 'CNG';
    const FUEL_TYPE_DUAL_FUEL = 'DualFuel';
    const FUEL_TYPE_HYDROGEN = 'Hydrogen';
    const FUEL_TYPE_OTHER = 'Other';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransmissionTypeAllowableValues()
    {
        return [
            self::TRANSMISSION_TYPE_MANUAL,
            self::TRANSMISSION_TYPE_AUTOMATIC,
            self::TRANSMISSION_TYPE_SEMI_AUTOMATIC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDriveTypeAllowableValues()
    {
        return [
            self::DRIVE_TYPE__4X2,
            self::DRIVE_TYPE__4X4,
            self::DRIVE_TYPE_ALL_WHEEL_DRIVE,
            self::DRIVE_TYPE_FRONT_WHEEL_DRIVE,
            self::DRIVE_TYPE_REAR_WHEEL_DRIVE,
            self::DRIVE_TYPE_FOUR_WHEEL_DRIVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFuelTypeAllowableValues()
    {
        return [
            self::FUEL_TYPE_PETROL,
            self::FUEL_TYPE_DIESEL,
            self::FUEL_TYPE_BIO_DIESEL,
            self::FUEL_TYPE_HYBRID,
            self::FUEL_TYPE_ELECTRIC,
            self::FUEL_TYPE_BI_FUEL,
            self::FUEL_TYPE_LPG,
            self::FUEL_TYPE_LNG,
            self::FUEL_TYPE_CNG,
            self::FUEL_TYPE_DUAL_FUEL,
            self::FUEL_TYPE_HYDROGEN,
            self::FUEL_TYPE_OTHER,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['vehicle_make'] = isset($data['vehicle_make']) ? $data['vehicle_make'] : null;
        $this->container['vehicle_model'] = isset($data['vehicle_model']) ? $data['vehicle_model'] : null;
        $this->container['vehicle_long_variant'] = isset($data['vehicle_long_variant']) ? $data['vehicle_long_variant'] : null;
        $this->container['model_body_shape'] = isset($data['model_body_shape']) ? $data['model_body_shape'] : null;
        $this->container['transmission_type'] = isset($data['transmission_type']) ? $data['transmission_type'] : null;
        $this->container['drive_type'] = isset($data['drive_type']) ? $data['drive_type'] : null;
        $this->container['fuel_type'] = isset($data['fuel_type']) ? $data['fuel_type'] : null;
        $this->container['engine_capacity'] = isset($data['engine_capacity']) ? $data['engine_capacity'] : null;
        $this->container['number_of_doors'] = isset($data['number_of_doors']) ? $data['number_of_doors'] : null;
        $this->container['introduction_date'] = isset($data['introduction_date']) ? $data['introduction_date'] : null;
        $this->container['discontinued_date'] = isset($data['discontinued_date']) ? $data['discontinued_date'] : null;
        $this->container['tumm_code'] = isset($data['tumm_code']) ? $data['tumm_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        $allowedValues = $this->getTransmissionTypeAllowableValues();
        if (!is_null($this->container['transmission_type']) && !in_array($this->container['transmission_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transmission_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDriveTypeAllowableValues();
        if (!is_null($this->container['drive_type']) && !in_array($this->container['drive_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'drive_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFuelTypeAllowableValues();
        if (!is_null($this->container['fuel_type']) && !in_array($this->container['fuel_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fuel_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vehicle_make
     *
     * @return string
     */
    public function getVehicleMake()
    {
        return $this->container['vehicle_make'];
    }

    /**
     * Sets vehicle_make
     *
     * @param string $vehicle_make vehicle_make
     *
     * @return $this
     */
    public function setVehicleMake($vehicle_make)
    {
        $this->container['vehicle_make'] = $vehicle_make;

        return $this;
    }

    /**
     * Gets vehicle_model
     *
     * @return string
     */
    public function getVehicleModel()
    {
        return $this->container['vehicle_model'];
    }

    /**
     * Sets vehicle_model
     *
     * @param string $vehicle_model vehicle_model
     *
     * @return $this
     */
    public function setVehicleModel($vehicle_model)
    {
        $this->container['vehicle_model'] = $vehicle_model;

        return $this;
    }

    /**
     * Gets vehicle_long_variant
     *
     * @return string
     */
    public function getVehicleLongVariant()
    {
        return $this->container['vehicle_long_variant'];
    }

    /**
     * Sets vehicle_long_variant
     *
     * @param string $vehicle_long_variant vehicle_long_variant
     *
     * @return $this
     */
    public function setVehicleLongVariant($vehicle_long_variant)
    {
        $this->container['vehicle_long_variant'] = $vehicle_long_variant;

        return $this;
    }

    /**
     * Gets model_body_shape
     *
     * @return string
     */
    public function getModelBodyShape()
    {
        return $this->container['model_body_shape'];
    }

    /**
     * Sets model_body_shape
     *
     * @param string $model_body_shape model_body_shape
     *
     * @return $this
     */
    public function setModelBodyShape($model_body_shape)
    {
        $this->container['model_body_shape'] = $model_body_shape;

        return $this;
    }

    /**
     * Gets transmission_type
     *
     * @return string
     */
    public function getTransmissionType()
    {
        return $this->container['transmission_type'];
    }

    /**
     * Sets transmission_type
     *
     * @param string $transmission_type transmission_type
     *
     * @return $this
     */
    public function setTransmissionType($transmission_type)
    {
        $allowedValues = $this->getTransmissionTypeAllowableValues();
        if (!is_null($transmission_type) && !in_array($transmission_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transmission_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transmission_type'] = $transmission_type;

        return $this;
    }

    /**
     * Gets drive_type
     *
     * @return string
     */
    public function getDriveType()
    {
        return $this->container['drive_type'];
    }

    /**
     * Sets drive_type
     *
     * @param string $drive_type drive_type
     *
     * @return $this
     */
    public function setDriveType($drive_type)
    {
        $allowedValues = $this->getDriveTypeAllowableValues();
        if (!is_null($drive_type) && !in_array($drive_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'drive_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drive_type'] = $drive_type;

        return $this;
    }

    /**
     * Gets fuel_type
     *
     * @return string
     */
    public function getFuelType()
    {
        return $this->container['fuel_type'];
    }

    /**
     * Sets fuel_type
     *
     * @param string $fuel_type fuel_type
     *
     * @return $this
     */
    public function setFuelType($fuel_type)
    {
        $allowedValues = $this->getFuelTypeAllowableValues();
        if (!is_null($fuel_type) && !in_array($fuel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fuel_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fuel_type'] = $fuel_type;

        return $this;
    }

    /**
     * Gets engine_capacity
     *
     * @return \AutoTrader\Client\Test\Model\NullableVolume
     */
    public function getEngineCapacity()
    {
        return $this->container['engine_capacity'];
    }

    /**
     * Sets engine_capacity
     *
     * @param \AutoTrader\Client\Test\Model\NullableVolume $engine_capacity engine_capacity
     *
     * @return $this
     */
    public function setEngineCapacity($engine_capacity)
    {
        $this->container['engine_capacity'] = $engine_capacity;

        return $this;
    }

    /**
     * Gets number_of_doors
     *
     * @return int
     */
    public function getNumberOfDoors()
    {
        return $this->container['number_of_doors'];
    }

    /**
     * Sets number_of_doors
     *
     * @param int $number_of_doors number_of_doors
     *
     * @return $this
     */
    public function setNumberOfDoors($number_of_doors)
    {
        $this->container['number_of_doors'] = $number_of_doors;

        return $this;
    }

    /**
     * Gets introduction_date
     *
     * @return \DateTime
     */
    public function getIntroductionDate()
    {
        return $this->container['introduction_date'];
    }

    /**
     * Sets introduction_date
     *
     * @param \DateTime $introduction_date introduction_date
     *
     * @return $this
     */
    public function setIntroductionDate($introduction_date)
    {
        $this->container['introduction_date'] = $introduction_date;

        return $this;
    }

    /**
     * Gets discontinued_date
     *
     * @return \DateTime
     */
    public function getDiscontinuedDate()
    {
        return $this->container['discontinued_date'];
    }

    /**
     * Sets discontinued_date
     *
     * @param \DateTime $discontinued_date discontinued_date
     *
     * @return $this
     */
    public function setDiscontinuedDate($discontinued_date)
    {
        $this->container['discontinued_date'] = $discontinued_date;

        return $this;
    }

    /**
     * Gets tumm_code
     *
     * @return int
     */
    public function getTummCode()
    {
        return $this->container['tumm_code'];
    }

    /**
     * Sets tumm_code
     *
     * @param int $tumm_code tumm_code
     *
     * @return $this
     */
    public function setTummCode($tumm_code)
    {
        $this->container['tumm_code'] = $tumm_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


