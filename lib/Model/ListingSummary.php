<?php
/**
 * ListingSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  AutoTrader\Client\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v2-listings service v2.0-listings
 *
 * AutoTrader REST service
 *
 * OpenAPI spec version: v2-listings
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AutoTrader\Client\Test\Model;

use \ArrayAccess;
use \AutoTrader\Client\Test\ObjectSerializer;

/**
 * ListingSummary Class Doc Comment
 *
 * @category Class
 * @package  AutoTrader\Client\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListingSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'listing_id' => 'int',
        'status' => 'string',
        'vehicle_specification_id' => 'int',
        'vehicle_category' => 'string',
        'vehicle_sub_category' => 'string',
        'update_date' => '\DateTime',
        'stock_number' => 'string',
        'dealer_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'listing_id' => 'int32',
        'status' => null,
        'vehicle_specification_id' => 'int32',
        'vehicle_category' => null,
        'vehicle_sub_category' => null,
        'update_date' => 'date-time',
        'stock_number' => null,
        'dealer_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_id' => 'listingId',
        'status' => 'status',
        'vehicle_specification_id' => 'vehicleSpecificationId',
        'vehicle_category' => 'vehicleCategory',
        'vehicle_sub_category' => 'vehicleSubCategory',
        'update_date' => 'updateDate',
        'stock_number' => 'stockNumber',
        'dealer_id' => 'dealerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_id' => 'setListingId',
        'status' => 'setStatus',
        'vehicle_specification_id' => 'setVehicleSpecificationId',
        'vehicle_category' => 'setVehicleCategory',
        'vehicle_sub_category' => 'setVehicleSubCategory',
        'update_date' => 'setUpdateDate',
        'stock_number' => 'setStockNumber',
        'dealer_id' => 'setDealerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_id' => 'getListingId',
        'status' => 'getStatus',
        'vehicle_specification_id' => 'getVehicleSpecificationId',
        'vehicle_category' => 'getVehicleCategory',
        'vehicle_sub_category' => 'getVehicleSubCategory',
        'update_date' => 'getUpdateDate',
        'stock_number' => 'getStockNumber',
        'dealer_id' => 'getDealerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ACTIVE = 'Active';
    const STATUS_INACTIVE = 'Inactive';
    const STATUS_WITHDRAWN = 'Withdrawn';
    const STATUS_SOLD = 'Sold';
    const STATUS_SPEC_CLARIFICATION = 'SpecClarification';
    const VEHICLE_CATEGORY_CARS = 'Cars';
    const VEHICLE_CATEGORY_BIKES = 'Bikes';
    const VEHICLE_CATEGORY_BOATS = 'Boats';
    const VEHICLE_CATEGORY_CARAVANS = 'Caravans';
    const VEHICLE_CATEGORY_TRACTORS = 'Tractors';
    const VEHICLE_CATEGORY_TRAILERS = 'Trailers';
    const VEHICLE_CATEGORY_ATTACHMENTS = 'Attachments';
    const VEHICLE_CATEGORY_LOADERS = 'Loaders';
    const VEHICLE_CATEGORY_EXCAVATORS = 'Excavators';
    const VEHICLE_CATEGORY_TRUCKS = 'Trucks';
    const VEHICLE_CATEGORY_GRADERS = 'Graders';
    const VEHICLE_CATEGORY_ROLLERS = 'Rollers';
    const VEHICLE_CATEGORY_DOZERS = 'Dozers';
    const VEHICLE_CATEGORY_CRANES = 'Cranes';
    const VEHICLE_CATEGORY_BUSES = 'Buses';
    const VEHICLE_CATEGORY_BAKKIES = 'Bakkies';
    const VEHICLE_CATEGORY_VANS = 'Vans';
    const VEHICLE_CATEGORY_FORKLIFTS = 'Forklifts';
    const VEHICLE_SUB_CATEGORY_BASS_BOAT = 'BassBoat';
    const VEHICLE_SUB_CATEGORY_BOWRIDER = 'Bowrider';
    const VEHICLE_SUB_CATEGORY_CANOE = 'Canoe';
    const VEHICLE_SUB_CATEGORY_CATAMARAN = 'Catamaran';
    const VEHICLE_SUB_CATEGORY_COMMERCIAL = 'Commercial';
    const VEHICLE_SUB_CATEGORY_CRUISER = 'Cruiser';
    const VEHICLE_SUB_CATEGORY_HOVERCRAFT = 'Hovercraft';
    const VEHICLE_SUB_CATEGORY_INFLATABLE = 'Inflatable';
    const VEHICLE_SUB_CATEGORY_JET_SKI = 'JetSki';
    const VEHICLE_SUB_CATEGORY_LUXURY_YACHT = 'LuxuryYacht';
    const VEHICLE_SUB_CATEGORY_MOTORBOAT = 'Motorboat';
    const VEHICLE_SUB_CATEGORY_OUTRIGGER_CANOE = 'OutriggerCanoe';
    const VEHICLE_SUB_CATEGORY_POWERBOAT = 'Powerboat';
    const VEHICLE_SUB_CATEGORY_RAFT = 'Raft';
    const VEHICLE_SUB_CATEGORY_RIVERBOAT = 'Riverboat';
    const VEHICLE_SUB_CATEGORY_SAIL = 'Sail';
    const VEHICLE_SUB_CATEGORY_SEMIRIGID = 'Semirigid';
    const VEHICLE_SUB_CATEGORY_SKIBOAT = 'Skiboat';
    const VEHICLE_SUB_CATEGORY_SUBMARINE = 'Submarine';
    const VEHICLE_SUB_CATEGORY_YACHT = 'Yacht';
    const VEHICLE_SUB_CATEGORY_STATIC_CARAVAN = 'StaticCaravan';
    const VEHICLE_SUB_CATEGORY_TOURING_CARAVAN = 'TouringCaravan';
    const VEHICLE_SUB_CATEGORY_NO_2_WD = 'No_2WD';
    const VEHICLE_SUB_CATEGORY_NO_4_WD = 'No_4WD';
    const VEHICLE_SUB_CATEGORY_TRACKED_TRACTORS = 'TrackedTractors';
    const VEHICLE_SUB_CATEGORY_DRAWBAR = 'Drawbar';
    const VEHICLE_SUB_CATEGORY_FIRE_FIGHTING = 'FireFighting';
    const VEHICLE_SUB_CATEGORY_MASS_SIDES = 'MassSides';
    const VEHICLE_SUB_CATEGORY_BALE_TRAILER = 'BaleTrailer';
    const VEHICLE_SUB_CATEGORY_BOX = 'Box';
    const VEHICLE_SUB_CATEGORY_BRICK = 'Brick';
    const VEHICLE_SUB_CATEGORY_CAGE_BODY = 'CageBody';
    const VEHICLE_SUB_CATEGORY_TIPPER_TRAILERS = 'TipperTrailers';
    const VEHICLE_SUB_CATEGORY_CAR_TRANSPORTER_TRAILERS = 'CarTransporterTrailers';
    const VEHICLE_SUB_CATEGORY_CATTLE = 'Cattle';
    const VEHICLE_SUB_CATEGORY_CURTAIN_SIDE_TRAILERS = 'CurtainSideTrailers';
    const VEHICLE_SUB_CATEGORY_DOLLY = 'Dolly';
    const VEHICLE_SUB_CATEGORY_DROPSIDE_TRAILERS = 'DropsideTrailers';
    const VEHICLE_SUB_CATEGORY_FLAT_DECK = 'FlatDeck';
    const VEHICLE_SUB_CATEGORY_FOLDING_GOOSE_NECK = 'FoldingGooseNeck';
    const VEHICLE_SUB_CATEGORY_FRONT_LINK = 'FrontLink';
    const VEHICLE_SUB_CATEGORY_INTERLINK = 'Interlink';
    const VEHICLE_SUB_CATEGORY_LOGGING = 'Logging';
    const VEHICLE_SUB_CATEGORY_LOWBED = 'Lowbed';
    const VEHICLE_SUB_CATEGORY_PAYLOADER = 'Payloader';
    const VEHICLE_SUB_CATEGORY_REFRIDGERATED = 'Refridgerated';
    const VEHICLE_SUB_CATEGORY_SEMI_TRAILER = 'SemiTrailer';
    const VEHICLE_SUB_CATEGORY_SKELETAL = 'Skeletal';
    const VEHICLE_SUB_CATEGORY_SLOPER = 'Sloper';
    const VEHICLE_SUB_CATEGORY_STEP_DECK = 'StepDeck';
    const VEHICLE_SUB_CATEGORY_SUPER_LINK = 'SuperLink';
    const VEHICLE_SUB_CATEGORY_TANK_TRAILER = 'TankTrailer';
    const VEHICLE_SUB_CATEGORY_TAUTLINER_TRAILERS = 'TautlinerTrailers';
    const VEHICLE_SUB_CATEGORY_HIGH_SPEED = 'HighSpeed';
    const VEHICLE_SUB_CATEGORY_BOWSER_TRAILER = 'BowserTrailer';
    const VEHICLE_SUB_CATEGORY_FORAGE_AND_HAY = 'ForageAndHay';
    const VEHICLE_SUB_CATEGORY_FORESTRY_AND_HEDGING = 'ForestryAndHedging';
    const VEHICLE_SUB_CATEGORY_GROUND_CARE_EQUIPMENT = 'GroundCareEquipment';
    const VEHICLE_SUB_CATEGORY_HARVESTER = 'Harvester';
    const VEHICLE_SUB_CATEGORY_SOWING_AND_PLANTING = 'SowingAndPlanting';
    const VEHICLE_SUB_CATEGORY_TILLAGE = 'Tillage';
    const VEHICLE_SUB_CATEGORY_SLASHER = 'Slasher';
    const VEHICLE_SUB_CATEGORY_CULTIVATOR = 'Cultivator';
    const VEHICLE_SUB_CATEGORY_HARROW = 'Harrow';
    const VEHICLE_SUB_CATEGORY_OFF_SET = 'OffSet';
    const VEHICLE_SUB_CATEGORY_PLOUGH = 'Plough';
    const VEHICLE_SUB_CATEGORY_RIPPER = 'Ripper';
    const VEHICLE_SUB_CATEGORY_TILLER = 'Tiller';
    const VEHICLE_SUB_CATEGORY_RIDGER = 'Ridger';
    const VEHICLE_SUB_CATEGORY_COMBINE_HARVESTER = 'CombineHarvester';
    const VEHICLE_SUB_CATEGORY_DIGGER_SHAKER = 'DiggerShaker';
    const VEHICLE_SUB_CATEGORY_FORAGE_HARVESTER = 'ForageHarvester';
    const VEHICLE_SUB_CATEGORY_HAMMER_MILL = 'HammerMill';
    const VEHICLE_SUB_CATEGORY_MOUNTED_SPRAYER = 'MountedSprayer';
    const VEHICLE_SUB_CATEGORY_PLANTER_SPRAYER = 'PlanterSprayer';
    const VEHICLE_SUB_CATEGORY_SELF_PROPELLED = 'SelfPropelled';
    const VEHICLE_SUB_CATEGORY_TRAILED_SPRAYER = 'TrailedSprayer';
    const VEHICLE_SUB_CATEGORY_TWIN_STREAM = 'TwinStream';
    const VEHICLE_SUB_CATEGORY_MIST_BLOWER = 'MistBlower';
    const VEHICLE_SUB_CATEGORY_BALE_GRABBER = 'BaleGrabber';
    const VEHICLE_SUB_CATEGORY_BALE_HANDLER = 'BaleHandler';
    const VEHICLE_SUB_CATEGORY_HAY_ACCUMULATOR = 'HayAccumulator';
    const VEHICLE_SUB_CATEGORY_TWINE_BALER = 'TwineBaler';
    const VEHICLE_SUB_CATEGORY_WRAPPER = 'Wrapper';
    const VEHICLE_SUB_CATEGORY_NO_3_POINT_SPREADER = 'No_3PointSpreader';
    const VEHICLE_SUB_CATEGORY_SLURRY_AND_MANURE = 'SlurryAndManure';
    const VEHICLE_SUB_CATEGORY_TRAILED_SPREADER = 'TrailedSpreader';
    const VEHICLE_SUB_CATEGORY_DISC_MOWER = 'DiscMower';
    const VEHICLE_SUB_CATEGORY_RAKE = 'Rake';
    const VEHICLE_SUB_CATEGORY_TEDDER = 'Tedder';
    const VEHICLE_SUB_CATEGORY_LIVESTOCK_FEEDER = 'LivestockFeeder';
    const VEHICLE_SUB_CATEGORY_PLANTING_EQUIPMENT = 'PlantingEquipment';
    const VEHICLE_SUB_CATEGORY_AERIAL_PLATFORM_ATTACHMENTS = 'AerialPlatformAttachments';
    const VEHICLE_SUB_CATEGORY_BUCKET = 'Bucket';
    const VEHICLE_SUB_CATEGORY_CRANE_ATTACHMENTS = 'CraneAttachments';
    const VEHICLE_SUB_CATEGORY_HAMMER = 'Hammer';
    const VEHICLE_SUB_CATEGORY_TRACK = 'Track';
    const VEHICLE_SUB_CATEGORY_WASTE_AND_RECYCLING = 'WasteAndRecycling';
    const VEHICLE_SUB_CATEGORY_SPRAYER = 'Sprayer';
    const VEHICLE_SUB_CATEGORY_BALER = 'Baler';
    const VEHICLE_SUB_CATEGORY_SPREADER = 'Spreader';
    const VEHICLE_SUB_CATEGORY_BROOM = 'Broom';
    const VEHICLE_SUB_CATEGORY_MULCHER = 'Mulcher';
    const VEHICLE_SUB_CATEGORY_WOOD_CHIPPER = 'WoodChipper';
    const VEHICLE_SUB_CATEGORY_FRONTEND_LOADER = 'FrontendLoader';
    const VEHICLE_SUB_CATEGORY_MULTITERRAIN_LOADER = 'MultiterrainLoader';
    const VEHICLE_SUB_CATEGORY_ROUGH_TERRAIN_LOADER = 'RoughTerrainLoader';
    const VEHICLE_SUB_CATEGORY_SKID_STEER_LOADER = 'SkidSteerLoader';
    const VEHICLE_SUB_CATEGORY_TLB = 'TLB';
    const VEHICLE_SUB_CATEGORY_TRACKED_LOADERS = 'TrackedLoaders';
    const VEHICLE_SUB_CATEGORY_WHEELED_LOADERS = 'WheeledLoaders';
    const VEHICLE_SUB_CATEGORY_MICRO_EXCAVATOR = 'MicroExcavator';
    const VEHICLE_SUB_CATEGORY_MIDI_EXCAVATOR = 'MidiExcavator';
    const VEHICLE_SUB_CATEGORY_MINI_EXCAVATOR = 'MiniExcavator';
    const VEHICLE_SUB_CATEGORY_TRACK_EXCAVATOR = 'TrackExcavator';
    const VEHICLE_SUB_CATEGORY_WHEELED_EXCAVATOR = 'WheeledExcavator';
    const VEHICLE_SUB_CATEGORY_DUMP_TRUCK = 'DumpTruck';
    const VEHICLE_SUB_CATEGORY_TRUCK_CRANE = 'TruckCrane';
    const VEHICLE_SUB_CATEGORY_CAGE = 'Cage';
    const VEHICLE_SUB_CATEGORY_CAR_TRANSPORTER_TRUCKS = 'CarTransporterTrucks';
    const VEHICLE_SUB_CATEGORY_CATTLE_BODY = 'CattleBody';
    const VEHICLE_SUB_CATEGORY_CHASSIS_CAB = 'ChassisCab';
    const VEHICLE_SUB_CATEGORY_CHERRY_PICKER_TRUCKS = 'CherryPickerTrucks';
    const VEHICLE_SUB_CATEGORY_COMPACTOR = 'Compactor';
    const VEHICLE_SUB_CATEGORY_CONCRETE_MIXER = 'ConcreteMixer';
    const VEHICLE_SUB_CATEGORY_CONCRETE_PUMP = 'ConcretePump';
    const VEHICLE_SUB_CATEGORY_CURTAIN_SIDE_TRUCKS = 'CurtainSideTrucks';
    const VEHICLE_SUB_CATEGORY_DIESEL_TANKER = 'DieselTanker';
    const VEHICLE_SUB_CATEGORY_DROPSIDE_TRUCKS = 'DropsideTrucks';
    const VEHICLE_SUB_CATEGORY_FIRE_FIGHTING_UNIT = 'FireFightingUnit';
    const VEHICLE_SUB_CATEGORY_FLATBED = 'Flatbed';
    const VEHICLE_SUB_CATEGORY_HONEY_SUCKER = 'HoneySucker';
    const VEHICLE_SUB_CATEGORY_HOOKLIFT = 'Hooklift';
    const VEHICLE_SUB_CATEGORY_INSULATED_BODY = 'InsulatedBody';
    const VEHICLE_SUB_CATEGORY_MASS_SIDE = 'MassSide';
    const VEHICLE_SUB_CATEGORY_OTHER_SPECIALIZED = 'OtherSpecialized';
    const VEHICLE_SUB_CATEGORY_PANTECHNICON = 'Pantechnicon';
    const VEHICLE_SUB_CATEGORY_PETROL_TANKER = 'PetrolTanker';
    const VEHICLE_SUB_CATEGORY_REFRIGERATED_BODY = 'RefrigeratedBody';
    const VEHICLE_SUB_CATEGORY_ROLL_BACK = 'RollBack';
    const VEHICLE_SUB_CATEGORY_SIDE_TIPPER = 'SideTipper';
    const VEHICLE_SUB_CATEGORY_SKIP_LOADER = 'SkipLoader';
    const VEHICLE_SUB_CATEGORY_TANKER = 'Tanker';
    const VEHICLE_SUB_CATEGORY_TAUTLINER_TRUCKS = 'TautlinerTrucks';
    const VEHICLE_SUB_CATEGORY_TIPPER_TRUCKS = 'TipperTrucks';
    const VEHICLE_SUB_CATEGORY_VOLUME_BODY = 'VolumeBody';
    const VEHICLE_SUB_CATEGORY_BOWSER_TRUCKS = 'BowserTrucks';
    const VEHICLE_SUB_CATEGORY_TRUCK_TRACTOR = 'TruckTractor';
    const VEHICLE_SUB_CATEGORY_FLAT = 'Flat';
    const VEHICLE_SUB_CATEGORY_PADFOOT = 'Padfoot';
    const VEHICLE_SUB_CATEGORY_TRACKED_DOZER = 'TrackedDozer';
    const VEHICLE_SUB_CATEGORY_WHEELED_DOZER = 'WheeledDozer';
    const VEHICLE_SUB_CATEGORY_ALL_TERRAIN_CRANE = 'AllTerrainCrane';
    const VEHICLE_SUB_CATEGORY_CRAWLER_CRANE = 'CrawlerCrane';
    const VEHICLE_SUB_CATEGORY_MOBILE = 'Mobile';
    const VEHICLE_SUB_CATEGORY_OVERHEAD_CRANE = 'OverheadCrane';
    const VEHICLE_SUB_CATEGORY_ROUGH_TERRAIN_CRANE = 'RoughTerrainCrane';
    const VEHICLE_SUB_CATEGORY_SIDELIFT_CRANE = 'SideliftCrane';
    const VEHICLE_SUB_CATEGORY_TOWER_CRANE = 'TowerCrane';
    const VEHICLE_SUB_CATEGORY_TRACKED_CRANE = 'TrackedCrane';
    const VEHICLE_SUB_CATEGORY_SELF_ERECTING_CRANE = 'SelfErectingCrane';
    const VEHICLE_SUB_CATEGORY_NO_16_SEATER = 'No_16Seater';
    const VEHICLE_SUB_CATEGORY_NO_22_SEATER = 'No_22Seater';
    const VEHICLE_SUB_CATEGORY_NO_24_SEATER = 'No_24Seater';
    const VEHICLE_SUB_CATEGORY_NO_25_SEATER = 'No_25Seater';
    const VEHICLE_SUB_CATEGORY_NO_28_SEATER = 'No_28Seater';
    const VEHICLE_SUB_CATEGORY_NO_30_SEATER = 'No_30Seater';
    const VEHICLE_SUB_CATEGORY_NO_32_SEATER = 'No_32Seater';
    const VEHICLE_SUB_CATEGORY_NO_40_SEATER = 'No_40Seater';
    const VEHICLE_SUB_CATEGORY_NO_50_SEATER = 'No_50Seater';
    const VEHICLE_SUB_CATEGORY_NO_60_SEATER = 'No_60Seater';
    const VEHICLE_SUB_CATEGORY_NO_65_SEATER = 'No_65Seater';
    const VEHICLE_SUB_CATEGORY_NO_70_SEATER = 'No_70Seater';
    const VEHICLE_SUB_CATEGORY_LUXURY = 'Luxury';
    const VEHICLE_SUB_CATEGORY_MINI_BUS = 'MiniBus';
    const VEHICLE_SUB_CATEGORY_SEMI_LUXURY = 'SemiLuxury';
    const VEHICLE_SUB_CATEGORY_SINGLECAB = 'Singlecab';
    const VEHICLE_SUB_CATEGORY_DOUBLECAB = 'Doublecab';
    const VEHICLE_SUB_CATEGORY_SUPERCAB = 'Supercab';
    const VEHICLE_SUB_CATEGORY_EXTENDEDCAB = 'Extendedcab';
    const VEHICLE_SUB_CATEGORY_KINGCAB = 'Kingcab';
    const VEHICLE_SUB_CATEGORY_PANEL_VAN = 'PanelVan';
    const VEHICLE_SUB_CATEGORY_PEOPLE_TRANSPORTER = 'PeopleTransporter';
    const VEHICLE_SUB_CATEGORY_ALL_TERRAIN_FORKLIFT = 'AllTerrainForklift';
    const VEHICLE_SUB_CATEGORY_CONTAINER_HANDLER = 'ContainerHandler';
    const VEHICLE_SUB_CATEGORY_COUNTER_BALANCED_FORKLIFT = 'CounterBalancedForklift';
    const VEHICLE_SUB_CATEGORY_NARROW_AISLE_TRUCK = 'NarrowAisleTruck';
    const VEHICLE_SUB_CATEGORY_REACH_TRUCK = 'ReachTruck';
    const VEHICLE_SUB_CATEGORY_SIDE_LOADER = 'SideLoader';
    const VEHICLE_SUB_CATEGORY_STACKER = 'Stacker';
    const VEHICLE_SUB_CATEGORY_CHERRY_PICKER_FORKLIFTS = 'CherryPickerForklifts';
    const VEHICLE_SUB_CATEGORY_AERIAL_PLATFORM_FORKLIFTS = 'AerialPlatformForklifts';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
            self::STATUS_WITHDRAWN,
            self::STATUS_SOLD,
            self::STATUS_SPEC_CLARIFICATION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVehicleCategoryAllowableValues()
    {
        return [
            self::VEHICLE_CATEGORY_CARS,
            self::VEHICLE_CATEGORY_BIKES,
            self::VEHICLE_CATEGORY_BOATS,
            self::VEHICLE_CATEGORY_CARAVANS,
            self::VEHICLE_CATEGORY_TRACTORS,
            self::VEHICLE_CATEGORY_TRAILERS,
            self::VEHICLE_CATEGORY_ATTACHMENTS,
            self::VEHICLE_CATEGORY_LOADERS,
            self::VEHICLE_CATEGORY_EXCAVATORS,
            self::VEHICLE_CATEGORY_TRUCKS,
            self::VEHICLE_CATEGORY_GRADERS,
            self::VEHICLE_CATEGORY_ROLLERS,
            self::VEHICLE_CATEGORY_DOZERS,
            self::VEHICLE_CATEGORY_CRANES,
            self::VEHICLE_CATEGORY_BUSES,
            self::VEHICLE_CATEGORY_BAKKIES,
            self::VEHICLE_CATEGORY_VANS,
            self::VEHICLE_CATEGORY_FORKLIFTS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVehicleSubCategoryAllowableValues()
    {
        return [
            self::VEHICLE_SUB_CATEGORY_BASS_BOAT,
            self::VEHICLE_SUB_CATEGORY_BOWRIDER,
            self::VEHICLE_SUB_CATEGORY_CANOE,
            self::VEHICLE_SUB_CATEGORY_CATAMARAN,
            self::VEHICLE_SUB_CATEGORY_COMMERCIAL,
            self::VEHICLE_SUB_CATEGORY_CRUISER,
            self::VEHICLE_SUB_CATEGORY_HOVERCRAFT,
            self::VEHICLE_SUB_CATEGORY_INFLATABLE,
            self::VEHICLE_SUB_CATEGORY_JET_SKI,
            self::VEHICLE_SUB_CATEGORY_LUXURY_YACHT,
            self::VEHICLE_SUB_CATEGORY_MOTORBOAT,
            self::VEHICLE_SUB_CATEGORY_OUTRIGGER_CANOE,
            self::VEHICLE_SUB_CATEGORY_POWERBOAT,
            self::VEHICLE_SUB_CATEGORY_RAFT,
            self::VEHICLE_SUB_CATEGORY_RIVERBOAT,
            self::VEHICLE_SUB_CATEGORY_SAIL,
            self::VEHICLE_SUB_CATEGORY_SEMIRIGID,
            self::VEHICLE_SUB_CATEGORY_SKIBOAT,
            self::VEHICLE_SUB_CATEGORY_SUBMARINE,
            self::VEHICLE_SUB_CATEGORY_YACHT,
            self::VEHICLE_SUB_CATEGORY_STATIC_CARAVAN,
            self::VEHICLE_SUB_CATEGORY_TOURING_CARAVAN,
            self::VEHICLE_SUB_CATEGORY_NO_2_WD,
            self::VEHICLE_SUB_CATEGORY_NO_4_WD,
            self::VEHICLE_SUB_CATEGORY_TRACKED_TRACTORS,
            self::VEHICLE_SUB_CATEGORY_DRAWBAR,
            self::VEHICLE_SUB_CATEGORY_FIRE_FIGHTING,
            self::VEHICLE_SUB_CATEGORY_MASS_SIDES,
            self::VEHICLE_SUB_CATEGORY_BALE_TRAILER,
            self::VEHICLE_SUB_CATEGORY_BOX,
            self::VEHICLE_SUB_CATEGORY_BRICK,
            self::VEHICLE_SUB_CATEGORY_CAGE_BODY,
            self::VEHICLE_SUB_CATEGORY_TIPPER_TRAILERS,
            self::VEHICLE_SUB_CATEGORY_CAR_TRANSPORTER_TRAILERS,
            self::VEHICLE_SUB_CATEGORY_CATTLE,
            self::VEHICLE_SUB_CATEGORY_CURTAIN_SIDE_TRAILERS,
            self::VEHICLE_SUB_CATEGORY_DOLLY,
            self::VEHICLE_SUB_CATEGORY_DROPSIDE_TRAILERS,
            self::VEHICLE_SUB_CATEGORY_FLAT_DECK,
            self::VEHICLE_SUB_CATEGORY_FOLDING_GOOSE_NECK,
            self::VEHICLE_SUB_CATEGORY_FRONT_LINK,
            self::VEHICLE_SUB_CATEGORY_INTERLINK,
            self::VEHICLE_SUB_CATEGORY_LOGGING,
            self::VEHICLE_SUB_CATEGORY_LOWBED,
            self::VEHICLE_SUB_CATEGORY_PAYLOADER,
            self::VEHICLE_SUB_CATEGORY_REFRIDGERATED,
            self::VEHICLE_SUB_CATEGORY_SEMI_TRAILER,
            self::VEHICLE_SUB_CATEGORY_SKELETAL,
            self::VEHICLE_SUB_CATEGORY_SLOPER,
            self::VEHICLE_SUB_CATEGORY_STEP_DECK,
            self::VEHICLE_SUB_CATEGORY_SUPER_LINK,
            self::VEHICLE_SUB_CATEGORY_TANK_TRAILER,
            self::VEHICLE_SUB_CATEGORY_TAUTLINER_TRAILERS,
            self::VEHICLE_SUB_CATEGORY_HIGH_SPEED,
            self::VEHICLE_SUB_CATEGORY_BOWSER_TRAILER,
            self::VEHICLE_SUB_CATEGORY_FORAGE_AND_HAY,
            self::VEHICLE_SUB_CATEGORY_FORESTRY_AND_HEDGING,
            self::VEHICLE_SUB_CATEGORY_GROUND_CARE_EQUIPMENT,
            self::VEHICLE_SUB_CATEGORY_HARVESTER,
            self::VEHICLE_SUB_CATEGORY_SOWING_AND_PLANTING,
            self::VEHICLE_SUB_CATEGORY_TILLAGE,
            self::VEHICLE_SUB_CATEGORY_SLASHER,
            self::VEHICLE_SUB_CATEGORY_CULTIVATOR,
            self::VEHICLE_SUB_CATEGORY_HARROW,
            self::VEHICLE_SUB_CATEGORY_OFF_SET,
            self::VEHICLE_SUB_CATEGORY_PLOUGH,
            self::VEHICLE_SUB_CATEGORY_RIPPER,
            self::VEHICLE_SUB_CATEGORY_TILLER,
            self::VEHICLE_SUB_CATEGORY_RIDGER,
            self::VEHICLE_SUB_CATEGORY_COMBINE_HARVESTER,
            self::VEHICLE_SUB_CATEGORY_DIGGER_SHAKER,
            self::VEHICLE_SUB_CATEGORY_FORAGE_HARVESTER,
            self::VEHICLE_SUB_CATEGORY_HAMMER_MILL,
            self::VEHICLE_SUB_CATEGORY_MOUNTED_SPRAYER,
            self::VEHICLE_SUB_CATEGORY_PLANTER_SPRAYER,
            self::VEHICLE_SUB_CATEGORY_SELF_PROPELLED,
            self::VEHICLE_SUB_CATEGORY_TRAILED_SPRAYER,
            self::VEHICLE_SUB_CATEGORY_TWIN_STREAM,
            self::VEHICLE_SUB_CATEGORY_MIST_BLOWER,
            self::VEHICLE_SUB_CATEGORY_BALE_GRABBER,
            self::VEHICLE_SUB_CATEGORY_BALE_HANDLER,
            self::VEHICLE_SUB_CATEGORY_HAY_ACCUMULATOR,
            self::VEHICLE_SUB_CATEGORY_TWINE_BALER,
            self::VEHICLE_SUB_CATEGORY_WRAPPER,
            self::VEHICLE_SUB_CATEGORY_NO_3_POINT_SPREADER,
            self::VEHICLE_SUB_CATEGORY_SLURRY_AND_MANURE,
            self::VEHICLE_SUB_CATEGORY_TRAILED_SPREADER,
            self::VEHICLE_SUB_CATEGORY_DISC_MOWER,
            self::VEHICLE_SUB_CATEGORY_RAKE,
            self::VEHICLE_SUB_CATEGORY_TEDDER,
            self::VEHICLE_SUB_CATEGORY_LIVESTOCK_FEEDER,
            self::VEHICLE_SUB_CATEGORY_PLANTING_EQUIPMENT,
            self::VEHICLE_SUB_CATEGORY_AERIAL_PLATFORM_ATTACHMENTS,
            self::VEHICLE_SUB_CATEGORY_BUCKET,
            self::VEHICLE_SUB_CATEGORY_CRANE_ATTACHMENTS,
            self::VEHICLE_SUB_CATEGORY_HAMMER,
            self::VEHICLE_SUB_CATEGORY_TRACK,
            self::VEHICLE_SUB_CATEGORY_WASTE_AND_RECYCLING,
            self::VEHICLE_SUB_CATEGORY_SPRAYER,
            self::VEHICLE_SUB_CATEGORY_BALER,
            self::VEHICLE_SUB_CATEGORY_SPREADER,
            self::VEHICLE_SUB_CATEGORY_BROOM,
            self::VEHICLE_SUB_CATEGORY_MULCHER,
            self::VEHICLE_SUB_CATEGORY_WOOD_CHIPPER,
            self::VEHICLE_SUB_CATEGORY_FRONTEND_LOADER,
            self::VEHICLE_SUB_CATEGORY_MULTITERRAIN_LOADER,
            self::VEHICLE_SUB_CATEGORY_ROUGH_TERRAIN_LOADER,
            self::VEHICLE_SUB_CATEGORY_SKID_STEER_LOADER,
            self::VEHICLE_SUB_CATEGORY_TLB,
            self::VEHICLE_SUB_CATEGORY_TRACKED_LOADERS,
            self::VEHICLE_SUB_CATEGORY_WHEELED_LOADERS,
            self::VEHICLE_SUB_CATEGORY_MICRO_EXCAVATOR,
            self::VEHICLE_SUB_CATEGORY_MIDI_EXCAVATOR,
            self::VEHICLE_SUB_CATEGORY_MINI_EXCAVATOR,
            self::VEHICLE_SUB_CATEGORY_TRACK_EXCAVATOR,
            self::VEHICLE_SUB_CATEGORY_WHEELED_EXCAVATOR,
            self::VEHICLE_SUB_CATEGORY_DUMP_TRUCK,
            self::VEHICLE_SUB_CATEGORY_TRUCK_CRANE,
            self::VEHICLE_SUB_CATEGORY_CAGE,
            self::VEHICLE_SUB_CATEGORY_CAR_TRANSPORTER_TRUCKS,
            self::VEHICLE_SUB_CATEGORY_CATTLE_BODY,
            self::VEHICLE_SUB_CATEGORY_CHASSIS_CAB,
            self::VEHICLE_SUB_CATEGORY_CHERRY_PICKER_TRUCKS,
            self::VEHICLE_SUB_CATEGORY_COMPACTOR,
            self::VEHICLE_SUB_CATEGORY_CONCRETE_MIXER,
            self::VEHICLE_SUB_CATEGORY_CONCRETE_PUMP,
            self::VEHICLE_SUB_CATEGORY_CURTAIN_SIDE_TRUCKS,
            self::VEHICLE_SUB_CATEGORY_DIESEL_TANKER,
            self::VEHICLE_SUB_CATEGORY_DROPSIDE_TRUCKS,
            self::VEHICLE_SUB_CATEGORY_FIRE_FIGHTING_UNIT,
            self::VEHICLE_SUB_CATEGORY_FLATBED,
            self::VEHICLE_SUB_CATEGORY_HONEY_SUCKER,
            self::VEHICLE_SUB_CATEGORY_HOOKLIFT,
            self::VEHICLE_SUB_CATEGORY_INSULATED_BODY,
            self::VEHICLE_SUB_CATEGORY_MASS_SIDE,
            self::VEHICLE_SUB_CATEGORY_OTHER_SPECIALIZED,
            self::VEHICLE_SUB_CATEGORY_PANTECHNICON,
            self::VEHICLE_SUB_CATEGORY_PETROL_TANKER,
            self::VEHICLE_SUB_CATEGORY_REFRIGERATED_BODY,
            self::VEHICLE_SUB_CATEGORY_ROLL_BACK,
            self::VEHICLE_SUB_CATEGORY_SIDE_TIPPER,
            self::VEHICLE_SUB_CATEGORY_SKIP_LOADER,
            self::VEHICLE_SUB_CATEGORY_TANKER,
            self::VEHICLE_SUB_CATEGORY_TAUTLINER_TRUCKS,
            self::VEHICLE_SUB_CATEGORY_TIPPER_TRUCKS,
            self::VEHICLE_SUB_CATEGORY_VOLUME_BODY,
            self::VEHICLE_SUB_CATEGORY_BOWSER_TRUCKS,
            self::VEHICLE_SUB_CATEGORY_TRUCK_TRACTOR,
            self::VEHICLE_SUB_CATEGORY_FLAT,
            self::VEHICLE_SUB_CATEGORY_PADFOOT,
            self::VEHICLE_SUB_CATEGORY_TRACKED_DOZER,
            self::VEHICLE_SUB_CATEGORY_WHEELED_DOZER,
            self::VEHICLE_SUB_CATEGORY_ALL_TERRAIN_CRANE,
            self::VEHICLE_SUB_CATEGORY_CRAWLER_CRANE,
            self::VEHICLE_SUB_CATEGORY_MOBILE,
            self::VEHICLE_SUB_CATEGORY_OVERHEAD_CRANE,
            self::VEHICLE_SUB_CATEGORY_ROUGH_TERRAIN_CRANE,
            self::VEHICLE_SUB_CATEGORY_SIDELIFT_CRANE,
            self::VEHICLE_SUB_CATEGORY_TOWER_CRANE,
            self::VEHICLE_SUB_CATEGORY_TRACKED_CRANE,
            self::VEHICLE_SUB_CATEGORY_SELF_ERECTING_CRANE,
            self::VEHICLE_SUB_CATEGORY_NO_16_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_22_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_24_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_25_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_28_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_30_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_32_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_40_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_50_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_60_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_65_SEATER,
            self::VEHICLE_SUB_CATEGORY_NO_70_SEATER,
            self::VEHICLE_SUB_CATEGORY_LUXURY,
            self::VEHICLE_SUB_CATEGORY_MINI_BUS,
            self::VEHICLE_SUB_CATEGORY_SEMI_LUXURY,
            self::VEHICLE_SUB_CATEGORY_SINGLECAB,
            self::VEHICLE_SUB_CATEGORY_DOUBLECAB,
            self::VEHICLE_SUB_CATEGORY_SUPERCAB,
            self::VEHICLE_SUB_CATEGORY_EXTENDEDCAB,
            self::VEHICLE_SUB_CATEGORY_KINGCAB,
            self::VEHICLE_SUB_CATEGORY_PANEL_VAN,
            self::VEHICLE_SUB_CATEGORY_PEOPLE_TRANSPORTER,
            self::VEHICLE_SUB_CATEGORY_ALL_TERRAIN_FORKLIFT,
            self::VEHICLE_SUB_CATEGORY_CONTAINER_HANDLER,
            self::VEHICLE_SUB_CATEGORY_COUNTER_BALANCED_FORKLIFT,
            self::VEHICLE_SUB_CATEGORY_NARROW_AISLE_TRUCK,
            self::VEHICLE_SUB_CATEGORY_REACH_TRUCK,
            self::VEHICLE_SUB_CATEGORY_SIDE_LOADER,
            self::VEHICLE_SUB_CATEGORY_STACKER,
            self::VEHICLE_SUB_CATEGORY_CHERRY_PICKER_FORKLIFTS,
            self::VEHICLE_SUB_CATEGORY_AERIAL_PLATFORM_FORKLIFTS,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_id'] = isset($data['listing_id']) ? $data['listing_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['vehicle_specification_id'] = isset($data['vehicle_specification_id']) ? $data['vehicle_specification_id'] : null;
        $this->container['vehicle_category'] = isset($data['vehicle_category']) ? $data['vehicle_category'] : null;
        $this->container['vehicle_sub_category'] = isset($data['vehicle_sub_category']) ? $data['vehicle_sub_category'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['stock_number'] = isset($data['stock_number']) ? $data['stock_number'] : null;
        $this->container['dealer_id'] = isset($data['dealer_id']) ? $data['dealer_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['listing_id'] === null) {
            $invalidProperties[] = "'listing_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['vehicle_specification_id'] === null) {
            $invalidProperties[] = "'vehicle_specification_id' can't be null";
        }
        if ($this->container['vehicle_category'] === null) {
            $invalidProperties[] = "'vehicle_category' can't be null";
        }
        $allowedValues = $this->getVehicleCategoryAllowableValues();
        if (!is_null($this->container['vehicle_category']) && !in_array($this->container['vehicle_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vehicle_category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVehicleSubCategoryAllowableValues();
        if (!is_null($this->container['vehicle_sub_category']) && !in_array($this->container['vehicle_sub_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vehicle_sub_category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['update_date'] === null) {
            $invalidProperties[] = "'update_date' can't be null";
        }
        if ($this->container['dealer_id'] === null) {
            $invalidProperties[] = "'dealer_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_id
     *
     * @return int
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int $listing_id listing_id
     *
     * @return $this
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets vehicle_specification_id
     *
     * @return int
     */
    public function getVehicleSpecificationId()
    {
        return $this->container['vehicle_specification_id'];
    }

    /**
     * Sets vehicle_specification_id
     *
     * @param int $vehicle_specification_id vehicle_specification_id
     *
     * @return $this
     */
    public function setVehicleSpecificationId($vehicle_specification_id)
    {
        $this->container['vehicle_specification_id'] = $vehicle_specification_id;

        return $this;
    }

    /**
     * Gets vehicle_category
     *
     * @return string
     */
    public function getVehicleCategory()
    {
        return $this->container['vehicle_category'];
    }

    /**
     * Sets vehicle_category
     *
     * @param string $vehicle_category vehicle_category
     *
     * @return $this
     */
    public function setVehicleCategory($vehicle_category)
    {
        $allowedValues = $this->getVehicleCategoryAllowableValues();
        if (!in_array($vehicle_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vehicle_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vehicle_category'] = $vehicle_category;

        return $this;
    }

    /**
     * Gets vehicle_sub_category
     *
     * @return string
     */
    public function getVehicleSubCategory()
    {
        return $this->container['vehicle_sub_category'];
    }

    /**
     * Sets vehicle_sub_category
     *
     * @param string $vehicle_sub_category vehicle_sub_category
     *
     * @return $this
     */
    public function setVehicleSubCategory($vehicle_sub_category)
    {
        $allowedValues = $this->getVehicleSubCategoryAllowableValues();
        if (!is_null($vehicle_sub_category) && !in_array($vehicle_sub_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vehicle_sub_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vehicle_sub_category'] = $vehicle_sub_category;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets stock_number
     *
     * @return string
     */
    public function getStockNumber()
    {
        return $this->container['stock_number'];
    }

    /**
     * Sets stock_number
     *
     * @param string $stock_number stock_number
     *
     * @return $this
     */
    public function setStockNumber($stock_number)
    {
        $this->container['stock_number'] = $stock_number;

        return $this;
    }

    /**
     * Gets dealer_id
     *
     * @return int
     */
    public function getDealerId()
    {
        return $this->container['dealer_id'];
    }

    /**
     * Sets dealer_id
     *
     * @param int $dealer_id dealer_id
     *
     * @return $this
     */
    public function setDealerId($dealer_id)
    {
        $this->container['dealer_id'] = $dealer_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


