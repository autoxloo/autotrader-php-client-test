<?php
/**
 * ListingModelReadOnly
 *
 * PHP version 5
 *
 * @category Class
 * @package  AutoTrader\Client\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v2-listings service v2.0-listings
 *
 * AutoTrader REST service
 *
 * OpenAPI spec version: v2-listings
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AutoTrader\Client\Test\Model;

use \ArrayAccess;
use \AutoTrader\Client\Test\ObjectSerializer;

/**
 * ListingModelReadOnly Class Doc Comment
 *
 * @category Class
 * @package  AutoTrader\Client\Test
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingModelReadOnly implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListingModelReadOnly';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dealer_id' => 'int',
        'new_used' => 'string',
        'category' => 'string',
        'sub_category' => 'string',
        'body_type' => 'string',
        'vin' => 'string',
        'stock_number' => 'string',
        'registration_number' => 'string',
        'registration_year' => 'int',
        'mileage' => 'int',
        'previous_owners' => 'int',
        'service_history' => 'string',
        'warranty_remaining_in_months' => 'int',
        'colour' => 'string',
        'manufacturer_colour' => 'string',
        'engine_capacity' => 'double',
        'engine_capacity_unit' => 'string',
        'engine_power' => 'double',
        'engine_power_unit' => 'string',
        'number_of_berths' => 'int',
        'length' => 'double',
        'width' => 'double',
        'height' => 'double',
        'max_payload' => 'int',
        'weight' => 'int',
        'lifting_capacity' => 'int',
        'capacity' => 'double',
        'axle_configuration' => 'string',
        'axles' => 'int',
        'fuel_type' => 'string',
        'transmission' => 'string',
        'transmission_drive' => 'string',
        'hours_in_operation' => 'int',
        'maximum_reach' => 'double',
        'specification_features' => 'string[]',
        'features' => 'string[]',
        'sellers_comments' => 'string',
        'trade_in_price' => 'int',
        'reconditioning_costs' => 'int',
        'list_price' => 'int',
        'poa' => 'bool',
        'is_featured_listing' => 'bool',
        'image_urls' => 'string[]',
        'status' => 'string',
        'rebuild' => 'bool',
        'make' => 'string',
        'model' => 'string',
        'variant' => 'string',
        'transmission_type' => 'string',
        'drive_type' => 'string',
        'number_of_doors' => 'int',
        'introduction_date' => '\DateTime',
        'discontinued_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dealer_id' => 'int32',
        'new_used' => null,
        'category' => null,
        'sub_category' => null,
        'body_type' => null,
        'vin' => null,
        'stock_number' => null,
        'registration_number' => null,
        'registration_year' => 'int32',
        'mileage' => 'int32',
        'previous_owners' => 'int32',
        'service_history' => null,
        'warranty_remaining_in_months' => 'int32',
        'colour' => null,
        'manufacturer_colour' => null,
        'engine_capacity' => 'double',
        'engine_capacity_unit' => null,
        'engine_power' => 'double',
        'engine_power_unit' => null,
        'number_of_berths' => 'int32',
        'length' => 'double',
        'width' => 'double',
        'height' => 'double',
        'max_payload' => 'int32',
        'weight' => 'int32',
        'lifting_capacity' => 'int32',
        'capacity' => 'double',
        'axle_configuration' => null,
        'axles' => 'int32',
        'fuel_type' => null,
        'transmission' => null,
        'transmission_drive' => null,
        'hours_in_operation' => 'int32',
        'maximum_reach' => 'double',
        'specification_features' => null,
        'features' => null,
        'sellers_comments' => null,
        'trade_in_price' => 'int32',
        'reconditioning_costs' => 'int32',
        'list_price' => 'int32',
        'poa' => null,
        'is_featured_listing' => null,
        'image_urls' => null,
        'status' => null,
        'rebuild' => null,
        'make' => null,
        'model' => null,
        'variant' => null,
        'transmission_type' => null,
        'drive_type' => null,
        'number_of_doors' => 'int32',
        'introduction_date' => 'date-time',
        'discontinued_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dealer_id' => 'dealerId',
        'new_used' => 'newUsed',
        'category' => 'category',
        'sub_category' => 'subCategory',
        'body_type' => 'bodyType',
        'vin' => 'vin',
        'stock_number' => 'stockNumber',
        'registration_number' => 'registrationNumber',
        'registration_year' => 'registrationYear',
        'mileage' => 'mileage',
        'previous_owners' => 'previousOwners',
        'service_history' => 'serviceHistory',
        'warranty_remaining_in_months' => 'warrantyRemainingInMonths',
        'colour' => 'colour',
        'manufacturer_colour' => 'manufacturerColour',
        'engine_capacity' => 'engineCapacity',
        'engine_capacity_unit' => 'engineCapacityUnit',
        'engine_power' => 'enginePower',
        'engine_power_unit' => 'enginePowerUnit',
        'number_of_berths' => 'numberOfBerths',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'max_payload' => 'maxPayload',
        'weight' => 'weight',
        'lifting_capacity' => 'liftingCapacity',
        'capacity' => 'capacity',
        'axle_configuration' => 'axleConfiguration',
        'axles' => 'axles',
        'fuel_type' => 'fuelType',
        'transmission' => 'transmission',
        'transmission_drive' => 'transmissionDrive',
        'hours_in_operation' => 'hoursInOperation',
        'maximum_reach' => 'maximumReach',
        'specification_features' => 'specificationFeatures',
        'features' => 'features',
        'sellers_comments' => 'sellersComments',
        'trade_in_price' => 'tradeInPrice',
        'reconditioning_costs' => 'reconditioningCosts',
        'list_price' => 'listPrice',
        'poa' => 'poa',
        'is_featured_listing' => 'isFeaturedListing',
        'image_urls' => 'imageUrls',
        'status' => 'status',
        'rebuild' => 'rebuild',
        'make' => 'make',
        'model' => 'model',
        'variant' => 'variant',
        'transmission_type' => 'transmissionType',
        'drive_type' => 'driveType',
        'number_of_doors' => 'numberOfDoors',
        'introduction_date' => 'introductionDate',
        'discontinued_date' => 'discontinuedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dealer_id' => 'setDealerId',
        'new_used' => 'setNewUsed',
        'category' => 'setCategory',
        'sub_category' => 'setSubCategory',
        'body_type' => 'setBodyType',
        'vin' => 'setVin',
        'stock_number' => 'setStockNumber',
        'registration_number' => 'setRegistrationNumber',
        'registration_year' => 'setRegistrationYear',
        'mileage' => 'setMileage',
        'previous_owners' => 'setPreviousOwners',
        'service_history' => 'setServiceHistory',
        'warranty_remaining_in_months' => 'setWarrantyRemainingInMonths',
        'colour' => 'setColour',
        'manufacturer_colour' => 'setManufacturerColour',
        'engine_capacity' => 'setEngineCapacity',
        'engine_capacity_unit' => 'setEngineCapacityUnit',
        'engine_power' => 'setEnginePower',
        'engine_power_unit' => 'setEnginePowerUnit',
        'number_of_berths' => 'setNumberOfBerths',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'max_payload' => 'setMaxPayload',
        'weight' => 'setWeight',
        'lifting_capacity' => 'setLiftingCapacity',
        'capacity' => 'setCapacity',
        'axle_configuration' => 'setAxleConfiguration',
        'axles' => 'setAxles',
        'fuel_type' => 'setFuelType',
        'transmission' => 'setTransmission',
        'transmission_drive' => 'setTransmissionDrive',
        'hours_in_operation' => 'setHoursInOperation',
        'maximum_reach' => 'setMaximumReach',
        'specification_features' => 'setSpecificationFeatures',
        'features' => 'setFeatures',
        'sellers_comments' => 'setSellersComments',
        'trade_in_price' => 'setTradeInPrice',
        'reconditioning_costs' => 'setReconditioningCosts',
        'list_price' => 'setListPrice',
        'poa' => 'setPoa',
        'is_featured_listing' => 'setIsFeaturedListing',
        'image_urls' => 'setImageUrls',
        'status' => 'setStatus',
        'rebuild' => 'setRebuild',
        'make' => 'setMake',
        'model' => 'setModel',
        'variant' => 'setVariant',
        'transmission_type' => 'setTransmissionType',
        'drive_type' => 'setDriveType',
        'number_of_doors' => 'setNumberOfDoors',
        'introduction_date' => 'setIntroductionDate',
        'discontinued_date' => 'setDiscontinuedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dealer_id' => 'getDealerId',
        'new_used' => 'getNewUsed',
        'category' => 'getCategory',
        'sub_category' => 'getSubCategory',
        'body_type' => 'getBodyType',
        'vin' => 'getVin',
        'stock_number' => 'getStockNumber',
        'registration_number' => 'getRegistrationNumber',
        'registration_year' => 'getRegistrationYear',
        'mileage' => 'getMileage',
        'previous_owners' => 'getPreviousOwners',
        'service_history' => 'getServiceHistory',
        'warranty_remaining_in_months' => 'getWarrantyRemainingInMonths',
        'colour' => 'getColour',
        'manufacturer_colour' => 'getManufacturerColour',
        'engine_capacity' => 'getEngineCapacity',
        'engine_capacity_unit' => 'getEngineCapacityUnit',
        'engine_power' => 'getEnginePower',
        'engine_power_unit' => 'getEnginePowerUnit',
        'number_of_berths' => 'getNumberOfBerths',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'max_payload' => 'getMaxPayload',
        'weight' => 'getWeight',
        'lifting_capacity' => 'getLiftingCapacity',
        'capacity' => 'getCapacity',
        'axle_configuration' => 'getAxleConfiguration',
        'axles' => 'getAxles',
        'fuel_type' => 'getFuelType',
        'transmission' => 'getTransmission',
        'transmission_drive' => 'getTransmissionDrive',
        'hours_in_operation' => 'getHoursInOperation',
        'maximum_reach' => 'getMaximumReach',
        'specification_features' => 'getSpecificationFeatures',
        'features' => 'getFeatures',
        'sellers_comments' => 'getSellersComments',
        'trade_in_price' => 'getTradeInPrice',
        'reconditioning_costs' => 'getReconditioningCosts',
        'list_price' => 'getListPrice',
        'poa' => 'getPoa',
        'is_featured_listing' => 'getIsFeaturedListing',
        'image_urls' => 'getImageUrls',
        'status' => 'getStatus',
        'rebuild' => 'getRebuild',
        'make' => 'getMake',
        'model' => 'getModel',
        'variant' => 'getVariant',
        'transmission_type' => 'getTransmissionType',
        'drive_type' => 'getDriveType',
        'number_of_doors' => 'getNumberOfDoors',
        'introduction_date' => 'getIntroductionDate',
        'discontinued_date' => 'getDiscontinuedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NEW_USED__NEW = 'New';
    const NEW_USED_USED = 'Used';
    const CATEGORY_CARS = 'Cars';
    const CATEGORY_BIKES = 'Bikes';
    const CATEGORY_BOATS = 'Boats';
    const CATEGORY_CARAVANS = 'Caravans';
    const CATEGORY_TRACTORS = 'Tractors';
    const CATEGORY_TRAILERS = 'Trailers';
    const CATEGORY_ATTACHMENTS = 'Attachments';
    const CATEGORY_LOADERS = 'Loaders';
    const CATEGORY_EXCAVATORS = 'Excavators';
    const CATEGORY_TRUCKS = 'Trucks';
    const CATEGORY_GRADERS = 'Graders';
    const CATEGORY_ROLLERS = 'Rollers';
    const CATEGORY_DOZERS = 'Dozers';
    const CATEGORY_CRANES = 'Cranes';
    const CATEGORY_BUSES = 'Buses';
    const CATEGORY_BAKKIES = 'Bakkies';
    const CATEGORY_VANS = 'Vans';
    const CATEGORY_FORKLIFTS = 'Forklifts';
    const SUB_CATEGORY_BASS_BOAT = 'BassBoat';
    const SUB_CATEGORY_BOWRIDER = 'Bowrider';
    const SUB_CATEGORY_CANOE = 'Canoe';
    const SUB_CATEGORY_CATAMARAN = 'Catamaran';
    const SUB_CATEGORY_COMMERCIAL = 'Commercial';
    const SUB_CATEGORY_CRUISER = 'Cruiser';
    const SUB_CATEGORY_HOVERCRAFT = 'Hovercraft';
    const SUB_CATEGORY_INFLATABLE = 'Inflatable';
    const SUB_CATEGORY_JET_SKI = 'JetSki';
    const SUB_CATEGORY_LUXURY_YACHT = 'LuxuryYacht';
    const SUB_CATEGORY_MOTORBOAT = 'Motorboat';
    const SUB_CATEGORY_OUTRIGGER_CANOE = 'OutriggerCanoe';
    const SUB_CATEGORY_POWERBOAT = 'Powerboat';
    const SUB_CATEGORY_RAFT = 'Raft';
    const SUB_CATEGORY_RIVERBOAT = 'Riverboat';
    const SUB_CATEGORY_SAIL = 'Sail';
    const SUB_CATEGORY_SEMIRIGID = 'Semirigid';
    const SUB_CATEGORY_SKIBOAT = 'Skiboat';
    const SUB_CATEGORY_SUBMARINE = 'Submarine';
    const SUB_CATEGORY_YACHT = 'Yacht';
    const SUB_CATEGORY_STATIC_CARAVAN = 'StaticCaravan';
    const SUB_CATEGORY_TOURING_CARAVAN = 'TouringCaravan';
    const SUB_CATEGORY_NO_2_WD = 'No_2WD';
    const SUB_CATEGORY_NO_4_WD = 'No_4WD';
    const SUB_CATEGORY_TRACKED_TRACTORS = 'TrackedTractors';
    const SUB_CATEGORY_DRAWBAR = 'Drawbar';
    const SUB_CATEGORY_FIRE_FIGHTING = 'FireFighting';
    const SUB_CATEGORY_MASS_SIDES = 'MassSides';
    const SUB_CATEGORY_BALE_TRAILER = 'BaleTrailer';
    const SUB_CATEGORY_BOX = 'Box';
    const SUB_CATEGORY_BRICK = 'Brick';
    const SUB_CATEGORY_CAGE_BODY = 'CageBody';
    const SUB_CATEGORY_TIPPER_TRAILERS = 'TipperTrailers';
    const SUB_CATEGORY_CAR_TRANSPORTER_TRAILERS = 'CarTransporterTrailers';
    const SUB_CATEGORY_CATTLE = 'Cattle';
    const SUB_CATEGORY_CURTAIN_SIDE_TRAILERS = 'CurtainSideTrailers';
    const SUB_CATEGORY_DOLLY = 'Dolly';
    const SUB_CATEGORY_DROPSIDE_TRAILERS = 'DropsideTrailers';
    const SUB_CATEGORY_FLAT_DECK = 'FlatDeck';
    const SUB_CATEGORY_FOLDING_GOOSE_NECK = 'FoldingGooseNeck';
    const SUB_CATEGORY_FRONT_LINK = 'FrontLink';
    const SUB_CATEGORY_INTERLINK = 'Interlink';
    const SUB_CATEGORY_LOGGING = 'Logging';
    const SUB_CATEGORY_LOWBED = 'Lowbed';
    const SUB_CATEGORY_PAYLOADER = 'Payloader';
    const SUB_CATEGORY_REFRIDGERATED = 'Refridgerated';
    const SUB_CATEGORY_SEMI_TRAILER = 'SemiTrailer';
    const SUB_CATEGORY_SKELETAL = 'Skeletal';
    const SUB_CATEGORY_SLOPER = 'Sloper';
    const SUB_CATEGORY_STEP_DECK = 'StepDeck';
    const SUB_CATEGORY_SUPER_LINK = 'SuperLink';
    const SUB_CATEGORY_TANK_TRAILER = 'TankTrailer';
    const SUB_CATEGORY_TAUTLINER_TRAILERS = 'TautlinerTrailers';
    const SUB_CATEGORY_HIGH_SPEED = 'HighSpeed';
    const SUB_CATEGORY_BOWSER_TRAILER = 'BowserTrailer';
    const SUB_CATEGORY_FORAGE_AND_HAY = 'ForageAndHay';
    const SUB_CATEGORY_FORESTRY_AND_HEDGING = 'ForestryAndHedging';
    const SUB_CATEGORY_GROUND_CARE_EQUIPMENT = 'GroundCareEquipment';
    const SUB_CATEGORY_HARVESTER = 'Harvester';
    const SUB_CATEGORY_SOWING_AND_PLANTING = 'SowingAndPlanting';
    const SUB_CATEGORY_TILLAGE = 'Tillage';
    const SUB_CATEGORY_SLASHER = 'Slasher';
    const SUB_CATEGORY_CULTIVATOR = 'Cultivator';
    const SUB_CATEGORY_HARROW = 'Harrow';
    const SUB_CATEGORY_OFF_SET = 'OffSet';
    const SUB_CATEGORY_PLOUGH = 'Plough';
    const SUB_CATEGORY_RIPPER = 'Ripper';
    const SUB_CATEGORY_TILLER = 'Tiller';
    const SUB_CATEGORY_RIDGER = 'Ridger';
    const SUB_CATEGORY_COMBINE_HARVESTER = 'CombineHarvester';
    const SUB_CATEGORY_DIGGER_SHAKER = 'DiggerShaker';
    const SUB_CATEGORY_FORAGE_HARVESTER = 'ForageHarvester';
    const SUB_CATEGORY_HAMMER_MILL = 'HammerMill';
    const SUB_CATEGORY_MOUNTED_SPRAYER = 'MountedSprayer';
    const SUB_CATEGORY_PLANTER_SPRAYER = 'PlanterSprayer';
    const SUB_CATEGORY_SELF_PROPELLED = 'SelfPropelled';
    const SUB_CATEGORY_TRAILED_SPRAYER = 'TrailedSprayer';
    const SUB_CATEGORY_TWIN_STREAM = 'TwinStream';
    const SUB_CATEGORY_MIST_BLOWER = 'MistBlower';
    const SUB_CATEGORY_BALE_GRABBER = 'BaleGrabber';
    const SUB_CATEGORY_BALE_HANDLER = 'BaleHandler';
    const SUB_CATEGORY_HAY_ACCUMULATOR = 'HayAccumulator';
    const SUB_CATEGORY_TWINE_BALER = 'TwineBaler';
    const SUB_CATEGORY_WRAPPER = 'Wrapper';
    const SUB_CATEGORY_NO_3_POINT_SPREADER = 'No_3PointSpreader';
    const SUB_CATEGORY_SLURRY_AND_MANURE = 'SlurryAndManure';
    const SUB_CATEGORY_TRAILED_SPREADER = 'TrailedSpreader';
    const SUB_CATEGORY_DISC_MOWER = 'DiscMower';
    const SUB_CATEGORY_RAKE = 'Rake';
    const SUB_CATEGORY_TEDDER = 'Tedder';
    const SUB_CATEGORY_LIVESTOCK_FEEDER = 'LivestockFeeder';
    const SUB_CATEGORY_PLANTING_EQUIPMENT = 'PlantingEquipment';
    const SUB_CATEGORY_AERIAL_PLATFORM_ATTACHMENTS = 'AerialPlatformAttachments';
    const SUB_CATEGORY_BUCKET = 'Bucket';
    const SUB_CATEGORY_CRANE_ATTACHMENTS = 'CraneAttachments';
    const SUB_CATEGORY_HAMMER = 'Hammer';
    const SUB_CATEGORY_TRACK = 'Track';
    const SUB_CATEGORY_WASTE_AND_RECYCLING = 'WasteAndRecycling';
    const SUB_CATEGORY_SPRAYER = 'Sprayer';
    const SUB_CATEGORY_BALER = 'Baler';
    const SUB_CATEGORY_SPREADER = 'Spreader';
    const SUB_CATEGORY_BROOM = 'Broom';
    const SUB_CATEGORY_MULCHER = 'Mulcher';
    const SUB_CATEGORY_WOOD_CHIPPER = 'WoodChipper';
    const SUB_CATEGORY_FRONTEND_LOADER = 'FrontendLoader';
    const SUB_CATEGORY_MULTITERRAIN_LOADER = 'MultiterrainLoader';
    const SUB_CATEGORY_ROUGH_TERRAIN_LOADER = 'RoughTerrainLoader';
    const SUB_CATEGORY_SKID_STEER_LOADER = 'SkidSteerLoader';
    const SUB_CATEGORY_TLB = 'TLB';
    const SUB_CATEGORY_TRACKED_LOADERS = 'TrackedLoaders';
    const SUB_CATEGORY_WHEELED_LOADERS = 'WheeledLoaders';
    const SUB_CATEGORY_MICRO_EXCAVATOR = 'MicroExcavator';
    const SUB_CATEGORY_MIDI_EXCAVATOR = 'MidiExcavator';
    const SUB_CATEGORY_MINI_EXCAVATOR = 'MiniExcavator';
    const SUB_CATEGORY_TRACK_EXCAVATOR = 'TrackExcavator';
    const SUB_CATEGORY_WHEELED_EXCAVATOR = 'WheeledExcavator';
    const SUB_CATEGORY_DUMP_TRUCK = 'DumpTruck';
    const SUB_CATEGORY_TRUCK_CRANE = 'TruckCrane';
    const SUB_CATEGORY_CAGE = 'Cage';
    const SUB_CATEGORY_CAR_TRANSPORTER_TRUCKS = 'CarTransporterTrucks';
    const SUB_CATEGORY_CATTLE_BODY = 'CattleBody';
    const SUB_CATEGORY_CHASSIS_CAB = 'ChassisCab';
    const SUB_CATEGORY_CHERRY_PICKER_TRUCKS = 'CherryPickerTrucks';
    const SUB_CATEGORY_COMPACTOR = 'Compactor';
    const SUB_CATEGORY_CONCRETE_MIXER = 'ConcreteMixer';
    const SUB_CATEGORY_CONCRETE_PUMP = 'ConcretePump';
    const SUB_CATEGORY_CURTAIN_SIDE_TRUCKS = 'CurtainSideTrucks';
    const SUB_CATEGORY_DIESEL_TANKER = 'DieselTanker';
    const SUB_CATEGORY_DROPSIDE_TRUCKS = 'DropsideTrucks';
    const SUB_CATEGORY_FIRE_FIGHTING_UNIT = 'FireFightingUnit';
    const SUB_CATEGORY_FLATBED = 'Flatbed';
    const SUB_CATEGORY_HONEY_SUCKER = 'HoneySucker';
    const SUB_CATEGORY_HOOKLIFT = 'Hooklift';
    const SUB_CATEGORY_INSULATED_BODY = 'InsulatedBody';
    const SUB_CATEGORY_MASS_SIDE = 'MassSide';
    const SUB_CATEGORY_OTHER_SPECIALIZED = 'OtherSpecialized';
    const SUB_CATEGORY_PANTECHNICON = 'Pantechnicon';
    const SUB_CATEGORY_PETROL_TANKER = 'PetrolTanker';
    const SUB_CATEGORY_REFRIGERATED_BODY = 'RefrigeratedBody';
    const SUB_CATEGORY_ROLL_BACK = 'RollBack';
    const SUB_CATEGORY_SIDE_TIPPER = 'SideTipper';
    const SUB_CATEGORY_SKIP_LOADER = 'SkipLoader';
    const SUB_CATEGORY_TANKER = 'Tanker';
    const SUB_CATEGORY_TAUTLINER_TRUCKS = 'TautlinerTrucks';
    const SUB_CATEGORY_TIPPER_TRUCKS = 'TipperTrucks';
    const SUB_CATEGORY_VOLUME_BODY = 'VolumeBody';
    const SUB_CATEGORY_BOWSER_TRUCKS = 'BowserTrucks';
    const SUB_CATEGORY_TRUCK_TRACTOR = 'TruckTractor';
    const SUB_CATEGORY_FLAT = 'Flat';
    const SUB_CATEGORY_PADFOOT = 'Padfoot';
    const SUB_CATEGORY_TRACKED_DOZER = 'TrackedDozer';
    const SUB_CATEGORY_WHEELED_DOZER = 'WheeledDozer';
    const SUB_CATEGORY_ALL_TERRAIN_CRANE = 'AllTerrainCrane';
    const SUB_CATEGORY_CRAWLER_CRANE = 'CrawlerCrane';
    const SUB_CATEGORY_MOBILE = 'Mobile';
    const SUB_CATEGORY_OVERHEAD_CRANE = 'OverheadCrane';
    const SUB_CATEGORY_ROUGH_TERRAIN_CRANE = 'RoughTerrainCrane';
    const SUB_CATEGORY_SIDELIFT_CRANE = 'SideliftCrane';
    const SUB_CATEGORY_TOWER_CRANE = 'TowerCrane';
    const SUB_CATEGORY_TRACKED_CRANE = 'TrackedCrane';
    const SUB_CATEGORY_SELF_ERECTING_CRANE = 'SelfErectingCrane';
    const SUB_CATEGORY_NO_16_SEATER = 'No_16Seater';
    const SUB_CATEGORY_NO_22_SEATER = 'No_22Seater';
    const SUB_CATEGORY_NO_24_SEATER = 'No_24Seater';
    const SUB_CATEGORY_NO_25_SEATER = 'No_25Seater';
    const SUB_CATEGORY_NO_28_SEATER = 'No_28Seater';
    const SUB_CATEGORY_NO_30_SEATER = 'No_30Seater';
    const SUB_CATEGORY_NO_32_SEATER = 'No_32Seater';
    const SUB_CATEGORY_NO_40_SEATER = 'No_40Seater';
    const SUB_CATEGORY_NO_50_SEATER = 'No_50Seater';
    const SUB_CATEGORY_NO_60_SEATER = 'No_60Seater';
    const SUB_CATEGORY_NO_65_SEATER = 'No_65Seater';
    const SUB_CATEGORY_NO_70_SEATER = 'No_70Seater';
    const SUB_CATEGORY_LUXURY = 'Luxury';
    const SUB_CATEGORY_MINI_BUS = 'MiniBus';
    const SUB_CATEGORY_SEMI_LUXURY = 'SemiLuxury';
    const SUB_CATEGORY_SINGLECAB = 'Singlecab';
    const SUB_CATEGORY_DOUBLECAB = 'Doublecab';
    const SUB_CATEGORY_SUPERCAB = 'Supercab';
    const SUB_CATEGORY_EXTENDEDCAB = 'Extendedcab';
    const SUB_CATEGORY_KINGCAB = 'Kingcab';
    const SUB_CATEGORY_PANEL_VAN = 'PanelVan';
    const SUB_CATEGORY_PEOPLE_TRANSPORTER = 'PeopleTransporter';
    const SUB_CATEGORY_ALL_TERRAIN_FORKLIFT = 'AllTerrainForklift';
    const SUB_CATEGORY_CONTAINER_HANDLER = 'ContainerHandler';
    const SUB_CATEGORY_COUNTER_BALANCED_FORKLIFT = 'CounterBalancedForklift';
    const SUB_CATEGORY_NARROW_AISLE_TRUCK = 'NarrowAisleTruck';
    const SUB_CATEGORY_REACH_TRUCK = 'ReachTruck';
    const SUB_CATEGORY_SIDE_LOADER = 'SideLoader';
    const SUB_CATEGORY_STACKER = 'Stacker';
    const SUB_CATEGORY_CHERRY_PICKER_FORKLIFTS = 'CherryPickerForklifts';
    const SUB_CATEGORY_AERIAL_PLATFORM_FORKLIFTS = 'AerialPlatformForklifts';
    const BODY_TYPE_CABRIOLET = 'Cabriolet';
    const BODY_TYPE_COUPE = 'Coupe';
    const BODY_TYPE_CREW_BUS = 'CrewBus';
    const BODY_TYPE_DOUBLE_CAB = 'DoubleCab';
    const BODY_TYPE_EXTENDED_CAB = 'ExtendedCab';
    const BODY_TYPE_FASTBACK = 'Fastback';
    const BODY_TYPE_HATCHBACK = 'Hatchback';
    const BODY_TYPE_KING_CAB = 'KingCab';
    const BODY_TYPE_LIGHT_COMMERCIAL_VEHICLE = 'LightCommercialVehicle';
    const BODY_TYPE_MINIBUS = 'Minibus';
    const BODY_TYPE_MULTI_PURPOSE_VEHICLE = 'MultiPurposeVehicle';
    const BODY_TYPE_PANEL_VAN = 'PanelVan';
    const BODY_TYPE_SEDAN = 'Sedan';
    const BODY_TYPE_SINGLE_CAB = 'SingleCab';
    const BODY_TYPE_SPORTBACK = 'Sportback';
    const BODY_TYPE_STATION_WAGON = 'StationWagon';
    const BODY_TYPE_SUPER_CAB = 'SuperCab';
    const BODY_TYPE_SPORTS_UTILITY_VEHICLE = 'SportsUtilityVehicle';
    const BODY_TYPE_ADVENTURE = 'Adventure';
    const BODY_TYPE_CHOPPER = 'Chopper';
    const BODY_TYPE_CLASSIC = 'Classic';
    const BODY_TYPE_COMMUTER = 'Commuter';
    const BODY_TYPE_CRUISER = 'Cruiser';
    const BODY_TYPE_CUSTOM_CRUISER = 'CustomCruiser';
    const BODY_TYPE_DUAL_PURPOSE = 'DualPurpose';
    const BODY_TYPE_DUAL_SPORT = 'DualSport';
    const BODY_TYPE_DUNE_BUGGY = 'DuneBuggy';
    const BODY_TYPE_ENDURO = 'Enduro';
    const BODY_TYPE_HYPER_SPORT = 'HyperSport';
    const BODY_TYPE_MINI_BIKE = 'MiniBike';
    const BODY_TYPE_MOPED = 'Moped';
    const BODY_TYPE_MOTOCROSS = 'Motocross';
    const BODY_TYPE_NAKED = 'Naked';
    const BODY_TYPE_PITBIKE = 'Pitbike';
    const BODY_TYPE_QUAD = 'Quad';
    const BODY_TYPE_QUAD_SPORT = 'QuadSport';
    const BODY_TYPE_QUAD_UTILITY = 'QuadUtility';
    const BODY_TYPE_ROADSTER_OR_RETRO = 'RoadsterOrRetro';
    const BODY_TYPE_SCOOTER = 'Scooter';
    const BODY_TYPE_SCRAMBLER = 'Scrambler';
    const BODY_TYPE_SIDECAR = 'Sidecar';
    const BODY_TYPE_SPIDER = 'Spider';
    const BODY_TYPE_SPORTS = 'Sports';
    const BODY_TYPE_SPORTS_TOURER = 'SportsTourer';
    const BODY_TYPE_STREET = 'Street';
    const BODY_TYPE_SUPER_BIKE = 'SuperBike';
    const BODY_TYPE_SUPER_MOTO = 'SuperMoto';
    const BODY_TYPE_SUPER_SPORTS = 'SuperSports';
    const BODY_TYPE_THREE_WHEELER = 'ThreeWheeler';
    const BODY_TYPE_TOURER = 'Tourer';
    const BODY_TYPE_TRAIL_BIKE = 'TrailBike';
    const BODY_TYPE_TRIALS_BIKE = 'TrialsBike';
    const BODY_TYPE_BENDY_BUS = 'BendyBus';
    const BODY_TYPE_COACH = 'Coach';
    const BODY_TYPE_DOUBLE_DECKER_COACH = 'DoubleDeckerCoach';
    const BODY_TYPE_DOUBLE_DECKER_BUS = 'DoubleDeckerBus';
    const BODY_TYPE_OPEN_DECK_BUS = 'OpenDeckBus';
    const BODY_TYPE_SINGLE_DECKER_BUS = 'SingleDeckerBus';
    const BODY_TYPE_TRIPLE_DECKER_BUS = 'TripleDeckerBus';
    const SERVICE_HISTORY_FULL = 'Full';
    const SERVICE_HISTORY_FULL_BY_FRANCHISE = 'FullByFranchise';
    const SERVICE_HISTORY_FULL_PARTIAL_BY_FRANCHISE = 'FullPartialByFranchise';
    const SERVICE_HISTORY_FULL_BY_NON_FRANCHISE = 'FullByNonFranchise';
    const SERVICE_HISTORY_PARTIAL = 'Partial';
    const SERVICE_HISTORY_NONE = 'None';
    const SERVICE_HISTORY_NOT_APPLICABLE = 'NotApplicable';
    const COLOUR_BEIGE = 'Beige';
    const COLOUR_BLACK = 'Black';
    const COLOUR_BLUE = 'Blue';
    const COLOUR_BRONZE = 'Bronze';
    const COLOUR_BROWN = 'Brown';
    const COLOUR_BURGUNDY = 'Burgundy';
    const COLOUR_GOLD = 'Gold';
    const COLOUR_GREEN = 'Green';
    const COLOUR_GREY = 'Grey';
    const COLOUR_MAGENTA = 'Magenta';
    const COLOUR_MAROON = 'Maroon';
    const COLOUR_NAVY = 'Navy';
    const COLOUR_ORANGE = 'Orange';
    const COLOUR_PINK = 'Pink';
    const COLOUR_PURPLE = 'Purple';
    const COLOUR_RED = 'Red';
    const COLOUR_SILVER = 'Silver';
    const COLOUR_TURQUOISE = 'Turquoise';
    const COLOUR_WHITE = 'White';
    const COLOUR_YELLOW = 'Yellow';
    const COLOUR_INDIGO = 'Indigo';
    const ENGINE_CAPACITY_UNIT_LITRE = 'Litre';
    const ENGINE_CAPACITY_UNIT_CUBIC_METRE = 'CubicMetre';
    const ENGINE_CAPACITY_UNIT_CUBIC_CENTIMETRE = 'CubicCentimetre';
    const ENGINE_CAPACITY_UNIT_GALLON = 'Gallon';
    const ENGINE_CAPACITY_UNIT_CUBIC_FEET = 'CubicFeet';
    const ENGINE_POWER_UNIT_BRAKE_HORSE_POWER = 'BrakeHorsePower';
    const ENGINE_POWER_UNIT_GERMAN_HORSE_POWER = 'GermanHorsePower';
    const ENGINE_POWER_UNIT_HORSE_POWER = 'HorsePower';
    const ENGINE_POWER_UNIT_KILOWATT = 'Kilowatt';
    const ENGINE_POWER_UNIT_SPANISH_HORSE_POWER = 'SpanishHorsePower';
    const AXLE_CONFIGURATION__2X2 = '_2x2';
    const AXLE_CONFIGURATION__4X2 = '_4x2';
    const AXLE_CONFIGURATION__4X4 = '_4x4';
    const AXLE_CONFIGURATION__6X2 = '_6x2';
    const AXLE_CONFIGURATION__6X4 = '_6x4';
    const AXLE_CONFIGURATION__6X6 = '_6x6';
    const AXLE_CONFIGURATION__8X2 = '_8x2';
    const AXLE_CONFIGURATION__8X4 = '_8x4';
    const AXLE_CONFIGURATION__8X6 = '_8x6';
    const AXLE_CONFIGURATION__8X8 = '_8x8';
    const AXLE_CONFIGURATION_OTHER = 'Other';
    const AXLE_CONFIGURATION__3 = '_3';
    const AXLE_CONFIGURATION__5 = '_5';
    const FUEL_TYPE_PETROL = 'Petrol';
    const FUEL_TYPE_DIESEL = 'Diesel';
    const FUEL_TYPE_BIO_DIESEL = 'BioDiesel';
    const FUEL_TYPE_HYBRID = 'Hybrid';
    const FUEL_TYPE_ELECTRIC = 'Electric';
    const FUEL_TYPE_BI_FUEL = 'BiFuel';
    const FUEL_TYPE_LPG = 'LPG';
    const FUEL_TYPE_LNG = 'LNG';
    const FUEL_TYPE_CNG = 'CNG';
    const FUEL_TYPE_DUAL_FUEL = 'DualFuel';
    const FUEL_TYPE_HYDROGEN = 'Hydrogen';
    const FUEL_TYPE_OTHER = 'Other';
    const TRANSMISSION_MANUAL = 'Manual';
    const TRANSMISSION_AUTOMATIC = 'Automatic';
    const TRANSMISSION_SEMI_AUTOMATIC = 'SemiAutomatic';
    const TRANSMISSION_DRIVE__4X2 = '_4x2';
    const TRANSMISSION_DRIVE__4X4 = '_4x4';
    const TRANSMISSION_DRIVE_ALL_WHEEL_DRIVE = 'AllWheelDrive';
    const TRANSMISSION_DRIVE_FRONT_WHEEL_DRIVE = 'FrontWheelDrive';
    const TRANSMISSION_DRIVE_REAR_WHEEL_DRIVE = 'RearWheelDrive';
    const TRANSMISSION_DRIVE_FOUR_WHEEL_DRIVE = 'FourWheelDrive';
    const SPECIFICATION_FEATURES_SUPERCHARGER = 'Supercharger';
    const SPECIFICATION_FEATURES_TURBOCHARGER = 'Turbocharger';
    const SPECIFICATION_FEATURES_HYBRID = 'Hybrid';
    const SPECIFICATION_FEATURES_ENGINE_AUTO_STOP = 'EngineAutoStop';
    const SPECIFICATION_FEATURES_LOW_RANGE = 'LowRange';
    const SPECIFICATION_FEATURES_GEARSHIFT_PADDLES = 'GearshiftPaddles';
    const SPECIFICATION_FEATURES_ANTI_LOCK_BAKING_SYSTEM = 'AntiLockBakingSystem';
    const SPECIFICATION_FEATURES_ELECTRONIC_BRAKE_DISTRIBUTION = 'ElectronicBrakeDistribution';
    const SPECIFICATION_FEATURES_BRAKE_ASSIST = 'BrakeAssist';
    const SPECIFICATION_FEATURES_ELECTRO_MECHANICAL_PARKING_BRAKE = 'ElectroMechanicalParkingBrake';
    const SPECIFICATION_FEATURES_HILL_START_ASSIST = 'HillStartAssist';
    const SPECIFICATION_FEATURES_LIMITED_SLIP_DIFF = 'LimitedSlipDiff';
    const SPECIFICATION_FEATURES_DIFF_LOCK_FRONT = 'DiffLockFront';
    const SPECIFICATION_FEATURES_DIFF_LOCK_CENTRE = 'DiffLockCentre';
    const SPECIFICATION_FEATURES_DIFF_LOCK_REAR = 'DiffLockRear';
    const SPECIFICATION_FEATURES_TRACTION_CONTROL = 'TractionControl';
    const SPECIFICATION_FEATURES_STABILITY_CONTROL = 'StabilityControl';
    const SPECIFICATION_FEATURES_HILL_DESCENT_CONTROL = 'HillDescentControl';
    const SPECIFICATION_FEATURES_ALLOY_WHEELS = 'AlloyWheels';
    const SPECIFICATION_FEATURES_TYRE_PRESSURE_SENSOR = 'TyrePressureSensor';
    const SPECIFICATION_FEATURES_DRIVER_AIRBAG = 'DriverAirbag';
    const SPECIFICATION_FEATURES_FRONT_PASSENGER_AIRBAG = 'FrontPassengerAirbag';
    const SPECIFICATION_FEATURES_DRIVER_KNEE_AIRBAG = 'DriverKneeAirbag';
    const SPECIFICATION_FEATURES_PASSENGER_KNEE_AIRBAG = 'PassengerKneeAirbag';
    const SPECIFICATION_FEATURES_FRONT_SIDE_AIRBAGS = 'FrontSideAirbags';
    const SPECIFICATION_FEATURES_REAR_SIDE_AIRBAGS = 'RearSideAirbags';
    const SPECIFICATION_FEATURES_CURTAIN_AIRBAGS = 'CurtainAirbags';
    const SPECIFICATION_FEATURES_AIR_CONDITIONING = 'AirConditioning';
    const SPECIFICATION_FEATURES_CLIMATE_CONTROL = 'ClimateControl';
    const SPECIFICATION_FEATURES_POWER_STEERING = 'PowerSteering';
    const SPECIFICATION_FEATURES_ELECTRIC_SEERING_COLUMN_ADJUSTMENT = 'ElectricSeeringColumnAdjustment';
    const SPECIFICATION_FEATURES_MULTI_FUNCTION_STEERING_WHEEL_CONTROLS = 'MultiFunctionSteeringWheelControls';
    const SPECIFICATION_FEATURES_LANE_DEPARTURE_WARNING = 'LaneDepartureWarning';
    const SPECIFICATION_FEATURES_LANE_CHANGE_BLIND_SPOT_WARNING = 'LaneChangeBlindSpotWarning';
    const SPECIFICATION_FEATURES_ATTENTION_ASSIST = 'AttentionAssist';
    const SPECIFICATION_FEATURES_HEAD_UP_DISPLAY = 'HeadUpDisplay';
    const SPECIFICATION_FEATURES_ONBOARD_COMPUTER = 'OnboardComputer';
    const SPECIFICATION_FEATURES_NAVIGATION = 'Navigation';
    const SPECIFICATION_FEATURES_CRUISE_CONTROL = 'CruiseControl';
    const SPECIFICATION_FEATURES_ADAPTIVE_CRUISE_CONTROL = 'AdaptiveCruiseControl';
    const SPECIFICATION_FEATURES_BLUETOOTH_CONNECTIVITY = 'BluetoothConnectivity';
    const SPECIFICATION_FEATURES_VOICE_CONTROL = 'VoiceControl';
    const SPECIFICATION_FEATURES_CD_PLAYER = 'CDPlayer';
    const SPECIFICATION_FEATURES_AUX_INPUT = 'AuxInput';
    const SPECIFICATION_FEATURES_USB_PORT = 'USBPort';
    const SPECIFICATION_FEATURES_REMOTE_CENTRAL_LOCKING = 'RemoteCentralLocking';
    const SPECIFICATION_FEATURES_KEYLESS_ACCESS_START = 'KeylessAccessStart';
    const SPECIFICATION_FEATURES_ELECTRIC_WINDOWS = 'ElectricWindows';
    const SPECIFICATION_FEATURES_RAIN_SENSOR = 'RainSensor';
    const SPECIFICATION_FEATURES_AUTODIM_INTERIOR_MIRROR = 'AutodimInteriorMirror';
    const SPECIFICATION_FEATURES_ELECTRIC_ADJUST_MIRRORS = 'ElectricAdjustMirrors';
    const SPECIFICATION_FEATURES_AUTODIM_EXTERIOR_MIRRORS = 'AutodimExteriorMirrors';
    const SPECIFICATION_FEATURES_SUNROOF = 'Sunroof';
    const SPECIFICATION_FEATURES_PANORAMIC_ROOF = 'PanoramicRoof';
    const SPECIFICATION_FEATURES_CLOTH_UPHOLSTERY = 'ClothUpholstery';
    const SPECIFICATION_FEATURES_SUEDE_CLOTH_UPHOLSTERY = 'SuedeClothUpholstery';
    const SPECIFICATION_FEATURES_LEATHER_UPHOLSTERY = 'LeatherUpholstery';
    const SPECIFICATION_FEATURES_HEATED_SEATS_FRONT = 'HeatedSeatsFront';
    const SPECIFICATION_FEATURES_VENTILATED_SEATS_FRONT = 'VentilatedSeatsFront';
    const SPECIFICATION_FEATURES_MASSAGING_SEATS_FRONT = 'MassagingSeatsFront';
    const SPECIFICATION_FEATURES_HEATED_SEATS_REAR = 'HeatedSeatsRear';
    const SPECIFICATION_FEATURES_VENTILATED_SEATS_REAR = 'VentilatedSeatsRear';
    const SPECIFICATION_FEATURES_MASSAGING_SEATS_REAR = 'MassagingSeatsRear';
    const SPECIFICATION_FEATURES_RUNNING_LIGHTS = 'RunningLights';
    const SPECIFICATION_FEATURES_AUTOMATIC_LIGHT_CONTROL = 'AutomaticLightControl';
    const SPECIFICATION_FEATURES_XENON_HEADLIGHTS = 'XenonHeadlights';
    const SPECIFICATION_FEATURES_ADAPTIVE_HEADLIGHTS = 'AdaptiveHeadlights';
    const SPECIFICATION_FEATURES_HIGH_BEAM_ASSIST = 'HighBeamAssist';
    const SPECIFICATION_FEATURES_FRONT_FOG_LIGHTS = 'FrontFogLights';
    const SPECIFICATION_FEATURES_HIGH_LEVEL_BRAKE_LIGHT = 'HighLevelBrakeLight';
    const SPECIFICATION_FEATURES_PARK_DISTANCE_CONTROL_FRONT = 'ParkDistanceControlFront';
    const SPECIFICATION_FEATURES_PARK_DISTANCE_CONTROL_REAR = 'ParkDistanceControlRear';
    const SPECIFICATION_FEATURES_CAMERA_FOR_PARK_DISTANCE_CONTROL = 'CameraForParkDistanceControl';
    const SPECIFICATION_FEATURES_SURROUND_VIEW_CAMERAS = 'SurroundViewCameras';
    const SPECIFICATION_FEATURES_PARK_ASSIST = 'ParkAssist';
    const STATUS_ACTIVE = 'Active';
    const STATUS_INACTIVE = 'Inactive';
    const STATUS_WITHDRAWN = 'Withdrawn';
    const STATUS_SOLD = 'Sold';
    const STATUS_SPEC_CLARIFICATION = 'SpecClarification';
    const TRANSMISSION_TYPE_MANUAL = 'Manual';
    const TRANSMISSION_TYPE_AUTOMATIC = 'Automatic';
    const TRANSMISSION_TYPE_SEMI_AUTOMATIC = 'SemiAutomatic';
    const DRIVE_TYPE__4X2 = '_4x2';
    const DRIVE_TYPE__4X4 = '_4x4';
    const DRIVE_TYPE_ALL_WHEEL_DRIVE = 'AllWheelDrive';
    const DRIVE_TYPE_FRONT_WHEEL_DRIVE = 'FrontWheelDrive';
    const DRIVE_TYPE_REAR_WHEEL_DRIVE = 'RearWheelDrive';
    const DRIVE_TYPE_FOUR_WHEEL_DRIVE = 'FourWheelDrive';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNewUsedAllowableValues()
    {
        return [
            self::NEW_USED__NEW,
            self::NEW_USED_USED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_CARS,
            self::CATEGORY_BIKES,
            self::CATEGORY_BOATS,
            self::CATEGORY_CARAVANS,
            self::CATEGORY_TRACTORS,
            self::CATEGORY_TRAILERS,
            self::CATEGORY_ATTACHMENTS,
            self::CATEGORY_LOADERS,
            self::CATEGORY_EXCAVATORS,
            self::CATEGORY_TRUCKS,
            self::CATEGORY_GRADERS,
            self::CATEGORY_ROLLERS,
            self::CATEGORY_DOZERS,
            self::CATEGORY_CRANES,
            self::CATEGORY_BUSES,
            self::CATEGORY_BAKKIES,
            self::CATEGORY_VANS,
            self::CATEGORY_FORKLIFTS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubCategoryAllowableValues()
    {
        return [
            self::SUB_CATEGORY_BASS_BOAT,
            self::SUB_CATEGORY_BOWRIDER,
            self::SUB_CATEGORY_CANOE,
            self::SUB_CATEGORY_CATAMARAN,
            self::SUB_CATEGORY_COMMERCIAL,
            self::SUB_CATEGORY_CRUISER,
            self::SUB_CATEGORY_HOVERCRAFT,
            self::SUB_CATEGORY_INFLATABLE,
            self::SUB_CATEGORY_JET_SKI,
            self::SUB_CATEGORY_LUXURY_YACHT,
            self::SUB_CATEGORY_MOTORBOAT,
            self::SUB_CATEGORY_OUTRIGGER_CANOE,
            self::SUB_CATEGORY_POWERBOAT,
            self::SUB_CATEGORY_RAFT,
            self::SUB_CATEGORY_RIVERBOAT,
            self::SUB_CATEGORY_SAIL,
            self::SUB_CATEGORY_SEMIRIGID,
            self::SUB_CATEGORY_SKIBOAT,
            self::SUB_CATEGORY_SUBMARINE,
            self::SUB_CATEGORY_YACHT,
            self::SUB_CATEGORY_STATIC_CARAVAN,
            self::SUB_CATEGORY_TOURING_CARAVAN,
            self::SUB_CATEGORY_NO_2_WD,
            self::SUB_CATEGORY_NO_4_WD,
            self::SUB_CATEGORY_TRACKED_TRACTORS,
            self::SUB_CATEGORY_DRAWBAR,
            self::SUB_CATEGORY_FIRE_FIGHTING,
            self::SUB_CATEGORY_MASS_SIDES,
            self::SUB_CATEGORY_BALE_TRAILER,
            self::SUB_CATEGORY_BOX,
            self::SUB_CATEGORY_BRICK,
            self::SUB_CATEGORY_CAGE_BODY,
            self::SUB_CATEGORY_TIPPER_TRAILERS,
            self::SUB_CATEGORY_CAR_TRANSPORTER_TRAILERS,
            self::SUB_CATEGORY_CATTLE,
            self::SUB_CATEGORY_CURTAIN_SIDE_TRAILERS,
            self::SUB_CATEGORY_DOLLY,
            self::SUB_CATEGORY_DROPSIDE_TRAILERS,
            self::SUB_CATEGORY_FLAT_DECK,
            self::SUB_CATEGORY_FOLDING_GOOSE_NECK,
            self::SUB_CATEGORY_FRONT_LINK,
            self::SUB_CATEGORY_INTERLINK,
            self::SUB_CATEGORY_LOGGING,
            self::SUB_CATEGORY_LOWBED,
            self::SUB_CATEGORY_PAYLOADER,
            self::SUB_CATEGORY_REFRIDGERATED,
            self::SUB_CATEGORY_SEMI_TRAILER,
            self::SUB_CATEGORY_SKELETAL,
            self::SUB_CATEGORY_SLOPER,
            self::SUB_CATEGORY_STEP_DECK,
            self::SUB_CATEGORY_SUPER_LINK,
            self::SUB_CATEGORY_TANK_TRAILER,
            self::SUB_CATEGORY_TAUTLINER_TRAILERS,
            self::SUB_CATEGORY_HIGH_SPEED,
            self::SUB_CATEGORY_BOWSER_TRAILER,
            self::SUB_CATEGORY_FORAGE_AND_HAY,
            self::SUB_CATEGORY_FORESTRY_AND_HEDGING,
            self::SUB_CATEGORY_GROUND_CARE_EQUIPMENT,
            self::SUB_CATEGORY_HARVESTER,
            self::SUB_CATEGORY_SOWING_AND_PLANTING,
            self::SUB_CATEGORY_TILLAGE,
            self::SUB_CATEGORY_SLASHER,
            self::SUB_CATEGORY_CULTIVATOR,
            self::SUB_CATEGORY_HARROW,
            self::SUB_CATEGORY_OFF_SET,
            self::SUB_CATEGORY_PLOUGH,
            self::SUB_CATEGORY_RIPPER,
            self::SUB_CATEGORY_TILLER,
            self::SUB_CATEGORY_RIDGER,
            self::SUB_CATEGORY_COMBINE_HARVESTER,
            self::SUB_CATEGORY_DIGGER_SHAKER,
            self::SUB_CATEGORY_FORAGE_HARVESTER,
            self::SUB_CATEGORY_HAMMER_MILL,
            self::SUB_CATEGORY_MOUNTED_SPRAYER,
            self::SUB_CATEGORY_PLANTER_SPRAYER,
            self::SUB_CATEGORY_SELF_PROPELLED,
            self::SUB_CATEGORY_TRAILED_SPRAYER,
            self::SUB_CATEGORY_TWIN_STREAM,
            self::SUB_CATEGORY_MIST_BLOWER,
            self::SUB_CATEGORY_BALE_GRABBER,
            self::SUB_CATEGORY_BALE_HANDLER,
            self::SUB_CATEGORY_HAY_ACCUMULATOR,
            self::SUB_CATEGORY_TWINE_BALER,
            self::SUB_CATEGORY_WRAPPER,
            self::SUB_CATEGORY_NO_3_POINT_SPREADER,
            self::SUB_CATEGORY_SLURRY_AND_MANURE,
            self::SUB_CATEGORY_TRAILED_SPREADER,
            self::SUB_CATEGORY_DISC_MOWER,
            self::SUB_CATEGORY_RAKE,
            self::SUB_CATEGORY_TEDDER,
            self::SUB_CATEGORY_LIVESTOCK_FEEDER,
            self::SUB_CATEGORY_PLANTING_EQUIPMENT,
            self::SUB_CATEGORY_AERIAL_PLATFORM_ATTACHMENTS,
            self::SUB_CATEGORY_BUCKET,
            self::SUB_CATEGORY_CRANE_ATTACHMENTS,
            self::SUB_CATEGORY_HAMMER,
            self::SUB_CATEGORY_TRACK,
            self::SUB_CATEGORY_WASTE_AND_RECYCLING,
            self::SUB_CATEGORY_SPRAYER,
            self::SUB_CATEGORY_BALER,
            self::SUB_CATEGORY_SPREADER,
            self::SUB_CATEGORY_BROOM,
            self::SUB_CATEGORY_MULCHER,
            self::SUB_CATEGORY_WOOD_CHIPPER,
            self::SUB_CATEGORY_FRONTEND_LOADER,
            self::SUB_CATEGORY_MULTITERRAIN_LOADER,
            self::SUB_CATEGORY_ROUGH_TERRAIN_LOADER,
            self::SUB_CATEGORY_SKID_STEER_LOADER,
            self::SUB_CATEGORY_TLB,
            self::SUB_CATEGORY_TRACKED_LOADERS,
            self::SUB_CATEGORY_WHEELED_LOADERS,
            self::SUB_CATEGORY_MICRO_EXCAVATOR,
            self::SUB_CATEGORY_MIDI_EXCAVATOR,
            self::SUB_CATEGORY_MINI_EXCAVATOR,
            self::SUB_CATEGORY_TRACK_EXCAVATOR,
            self::SUB_CATEGORY_WHEELED_EXCAVATOR,
            self::SUB_CATEGORY_DUMP_TRUCK,
            self::SUB_CATEGORY_TRUCK_CRANE,
            self::SUB_CATEGORY_CAGE,
            self::SUB_CATEGORY_CAR_TRANSPORTER_TRUCKS,
            self::SUB_CATEGORY_CATTLE_BODY,
            self::SUB_CATEGORY_CHASSIS_CAB,
            self::SUB_CATEGORY_CHERRY_PICKER_TRUCKS,
            self::SUB_CATEGORY_COMPACTOR,
            self::SUB_CATEGORY_CONCRETE_MIXER,
            self::SUB_CATEGORY_CONCRETE_PUMP,
            self::SUB_CATEGORY_CURTAIN_SIDE_TRUCKS,
            self::SUB_CATEGORY_DIESEL_TANKER,
            self::SUB_CATEGORY_DROPSIDE_TRUCKS,
            self::SUB_CATEGORY_FIRE_FIGHTING_UNIT,
            self::SUB_CATEGORY_FLATBED,
            self::SUB_CATEGORY_HONEY_SUCKER,
            self::SUB_CATEGORY_HOOKLIFT,
            self::SUB_CATEGORY_INSULATED_BODY,
            self::SUB_CATEGORY_MASS_SIDE,
            self::SUB_CATEGORY_OTHER_SPECIALIZED,
            self::SUB_CATEGORY_PANTECHNICON,
            self::SUB_CATEGORY_PETROL_TANKER,
            self::SUB_CATEGORY_REFRIGERATED_BODY,
            self::SUB_CATEGORY_ROLL_BACK,
            self::SUB_CATEGORY_SIDE_TIPPER,
            self::SUB_CATEGORY_SKIP_LOADER,
            self::SUB_CATEGORY_TANKER,
            self::SUB_CATEGORY_TAUTLINER_TRUCKS,
            self::SUB_CATEGORY_TIPPER_TRUCKS,
            self::SUB_CATEGORY_VOLUME_BODY,
            self::SUB_CATEGORY_BOWSER_TRUCKS,
            self::SUB_CATEGORY_TRUCK_TRACTOR,
            self::SUB_CATEGORY_FLAT,
            self::SUB_CATEGORY_PADFOOT,
            self::SUB_CATEGORY_TRACKED_DOZER,
            self::SUB_CATEGORY_WHEELED_DOZER,
            self::SUB_CATEGORY_ALL_TERRAIN_CRANE,
            self::SUB_CATEGORY_CRAWLER_CRANE,
            self::SUB_CATEGORY_MOBILE,
            self::SUB_CATEGORY_OVERHEAD_CRANE,
            self::SUB_CATEGORY_ROUGH_TERRAIN_CRANE,
            self::SUB_CATEGORY_SIDELIFT_CRANE,
            self::SUB_CATEGORY_TOWER_CRANE,
            self::SUB_CATEGORY_TRACKED_CRANE,
            self::SUB_CATEGORY_SELF_ERECTING_CRANE,
            self::SUB_CATEGORY_NO_16_SEATER,
            self::SUB_CATEGORY_NO_22_SEATER,
            self::SUB_CATEGORY_NO_24_SEATER,
            self::SUB_CATEGORY_NO_25_SEATER,
            self::SUB_CATEGORY_NO_28_SEATER,
            self::SUB_CATEGORY_NO_30_SEATER,
            self::SUB_CATEGORY_NO_32_SEATER,
            self::SUB_CATEGORY_NO_40_SEATER,
            self::SUB_CATEGORY_NO_50_SEATER,
            self::SUB_CATEGORY_NO_60_SEATER,
            self::SUB_CATEGORY_NO_65_SEATER,
            self::SUB_CATEGORY_NO_70_SEATER,
            self::SUB_CATEGORY_LUXURY,
            self::SUB_CATEGORY_MINI_BUS,
            self::SUB_CATEGORY_SEMI_LUXURY,
            self::SUB_CATEGORY_SINGLECAB,
            self::SUB_CATEGORY_DOUBLECAB,
            self::SUB_CATEGORY_SUPERCAB,
            self::SUB_CATEGORY_EXTENDEDCAB,
            self::SUB_CATEGORY_KINGCAB,
            self::SUB_CATEGORY_PANEL_VAN,
            self::SUB_CATEGORY_PEOPLE_TRANSPORTER,
            self::SUB_CATEGORY_ALL_TERRAIN_FORKLIFT,
            self::SUB_CATEGORY_CONTAINER_HANDLER,
            self::SUB_CATEGORY_COUNTER_BALANCED_FORKLIFT,
            self::SUB_CATEGORY_NARROW_AISLE_TRUCK,
            self::SUB_CATEGORY_REACH_TRUCK,
            self::SUB_CATEGORY_SIDE_LOADER,
            self::SUB_CATEGORY_STACKER,
            self::SUB_CATEGORY_CHERRY_PICKER_FORKLIFTS,
            self::SUB_CATEGORY_AERIAL_PLATFORM_FORKLIFTS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBodyTypeAllowableValues()
    {
        return [
            self::BODY_TYPE_CABRIOLET,
            self::BODY_TYPE_COUPE,
            self::BODY_TYPE_CREW_BUS,
            self::BODY_TYPE_DOUBLE_CAB,
            self::BODY_TYPE_EXTENDED_CAB,
            self::BODY_TYPE_FASTBACK,
            self::BODY_TYPE_HATCHBACK,
            self::BODY_TYPE_KING_CAB,
            self::BODY_TYPE_LIGHT_COMMERCIAL_VEHICLE,
            self::BODY_TYPE_MINIBUS,
            self::BODY_TYPE_MULTI_PURPOSE_VEHICLE,
            self::BODY_TYPE_PANEL_VAN,
            self::BODY_TYPE_SEDAN,
            self::BODY_TYPE_SINGLE_CAB,
            self::BODY_TYPE_SPORTBACK,
            self::BODY_TYPE_STATION_WAGON,
            self::BODY_TYPE_SUPER_CAB,
            self::BODY_TYPE_SPORTS_UTILITY_VEHICLE,
            self::BODY_TYPE_ADVENTURE,
            self::BODY_TYPE_CHOPPER,
            self::BODY_TYPE_CLASSIC,
            self::BODY_TYPE_COMMUTER,
            self::BODY_TYPE_CRUISER,
            self::BODY_TYPE_CUSTOM_CRUISER,
            self::BODY_TYPE_DUAL_PURPOSE,
            self::BODY_TYPE_DUAL_SPORT,
            self::BODY_TYPE_DUNE_BUGGY,
            self::BODY_TYPE_ENDURO,
            self::BODY_TYPE_HYPER_SPORT,
            self::BODY_TYPE_MINI_BIKE,
            self::BODY_TYPE_MOPED,
            self::BODY_TYPE_MOTOCROSS,
            self::BODY_TYPE_NAKED,
            self::BODY_TYPE_PITBIKE,
            self::BODY_TYPE_QUAD,
            self::BODY_TYPE_QUAD_SPORT,
            self::BODY_TYPE_QUAD_UTILITY,
            self::BODY_TYPE_ROADSTER_OR_RETRO,
            self::BODY_TYPE_SCOOTER,
            self::BODY_TYPE_SCRAMBLER,
            self::BODY_TYPE_SIDECAR,
            self::BODY_TYPE_SPIDER,
            self::BODY_TYPE_SPORTS,
            self::BODY_TYPE_SPORTS_TOURER,
            self::BODY_TYPE_STREET,
            self::BODY_TYPE_SUPER_BIKE,
            self::BODY_TYPE_SUPER_MOTO,
            self::BODY_TYPE_SUPER_SPORTS,
            self::BODY_TYPE_THREE_WHEELER,
            self::BODY_TYPE_TOURER,
            self::BODY_TYPE_TRAIL_BIKE,
            self::BODY_TYPE_TRIALS_BIKE,
            self::BODY_TYPE_BENDY_BUS,
            self::BODY_TYPE_COACH,
            self::BODY_TYPE_DOUBLE_DECKER_COACH,
            self::BODY_TYPE_DOUBLE_DECKER_BUS,
            self::BODY_TYPE_OPEN_DECK_BUS,
            self::BODY_TYPE_SINGLE_DECKER_BUS,
            self::BODY_TYPE_TRIPLE_DECKER_BUS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceHistoryAllowableValues()
    {
        return [
            self::SERVICE_HISTORY_FULL,
            self::SERVICE_HISTORY_FULL_BY_FRANCHISE,
            self::SERVICE_HISTORY_FULL_PARTIAL_BY_FRANCHISE,
            self::SERVICE_HISTORY_FULL_BY_NON_FRANCHISE,
            self::SERVICE_HISTORY_PARTIAL,
            self::SERVICE_HISTORY_NONE,
            self::SERVICE_HISTORY_NOT_APPLICABLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getColourAllowableValues()
    {
        return [
            self::COLOUR_BEIGE,
            self::COLOUR_BLACK,
            self::COLOUR_BLUE,
            self::COLOUR_BRONZE,
            self::COLOUR_BROWN,
            self::COLOUR_BURGUNDY,
            self::COLOUR_GOLD,
            self::COLOUR_GREEN,
            self::COLOUR_GREY,
            self::COLOUR_MAGENTA,
            self::COLOUR_MAROON,
            self::COLOUR_NAVY,
            self::COLOUR_ORANGE,
            self::COLOUR_PINK,
            self::COLOUR_PURPLE,
            self::COLOUR_RED,
            self::COLOUR_SILVER,
            self::COLOUR_TURQUOISE,
            self::COLOUR_WHITE,
            self::COLOUR_YELLOW,
            self::COLOUR_INDIGO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEngineCapacityUnitAllowableValues()
    {
        return [
            self::ENGINE_CAPACITY_UNIT_LITRE,
            self::ENGINE_CAPACITY_UNIT_CUBIC_METRE,
            self::ENGINE_CAPACITY_UNIT_CUBIC_CENTIMETRE,
            self::ENGINE_CAPACITY_UNIT_GALLON,
            self::ENGINE_CAPACITY_UNIT_CUBIC_FEET,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnginePowerUnitAllowableValues()
    {
        return [
            self::ENGINE_POWER_UNIT_BRAKE_HORSE_POWER,
            self::ENGINE_POWER_UNIT_GERMAN_HORSE_POWER,
            self::ENGINE_POWER_UNIT_HORSE_POWER,
            self::ENGINE_POWER_UNIT_KILOWATT,
            self::ENGINE_POWER_UNIT_SPANISH_HORSE_POWER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAxleConfigurationAllowableValues()
    {
        return [
            self::AXLE_CONFIGURATION__2X2,
            self::AXLE_CONFIGURATION__4X2,
            self::AXLE_CONFIGURATION__4X4,
            self::AXLE_CONFIGURATION__6X2,
            self::AXLE_CONFIGURATION__6X4,
            self::AXLE_CONFIGURATION__6X6,
            self::AXLE_CONFIGURATION__8X2,
            self::AXLE_CONFIGURATION__8X4,
            self::AXLE_CONFIGURATION__8X6,
            self::AXLE_CONFIGURATION__8X8,
            self::AXLE_CONFIGURATION_OTHER,
            self::AXLE_CONFIGURATION__3,
            self::AXLE_CONFIGURATION__5,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFuelTypeAllowableValues()
    {
        return [
            self::FUEL_TYPE_PETROL,
            self::FUEL_TYPE_DIESEL,
            self::FUEL_TYPE_BIO_DIESEL,
            self::FUEL_TYPE_HYBRID,
            self::FUEL_TYPE_ELECTRIC,
            self::FUEL_TYPE_BI_FUEL,
            self::FUEL_TYPE_LPG,
            self::FUEL_TYPE_LNG,
            self::FUEL_TYPE_CNG,
            self::FUEL_TYPE_DUAL_FUEL,
            self::FUEL_TYPE_HYDROGEN,
            self::FUEL_TYPE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransmissionAllowableValues()
    {
        return [
            self::TRANSMISSION_MANUAL,
            self::TRANSMISSION_AUTOMATIC,
            self::TRANSMISSION_SEMI_AUTOMATIC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransmissionDriveAllowableValues()
    {
        return [
            self::TRANSMISSION_DRIVE__4X2,
            self::TRANSMISSION_DRIVE__4X4,
            self::TRANSMISSION_DRIVE_ALL_WHEEL_DRIVE,
            self::TRANSMISSION_DRIVE_FRONT_WHEEL_DRIVE,
            self::TRANSMISSION_DRIVE_REAR_WHEEL_DRIVE,
            self::TRANSMISSION_DRIVE_FOUR_WHEEL_DRIVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpecificationFeaturesAllowableValues()
    {
        return [
            self::SPECIFICATION_FEATURES_SUPERCHARGER,
            self::SPECIFICATION_FEATURES_TURBOCHARGER,
            self::SPECIFICATION_FEATURES_HYBRID,
            self::SPECIFICATION_FEATURES_ENGINE_AUTO_STOP,
            self::SPECIFICATION_FEATURES_LOW_RANGE,
            self::SPECIFICATION_FEATURES_GEARSHIFT_PADDLES,
            self::SPECIFICATION_FEATURES_ANTI_LOCK_BAKING_SYSTEM,
            self::SPECIFICATION_FEATURES_ELECTRONIC_BRAKE_DISTRIBUTION,
            self::SPECIFICATION_FEATURES_BRAKE_ASSIST,
            self::SPECIFICATION_FEATURES_ELECTRO_MECHANICAL_PARKING_BRAKE,
            self::SPECIFICATION_FEATURES_HILL_START_ASSIST,
            self::SPECIFICATION_FEATURES_LIMITED_SLIP_DIFF,
            self::SPECIFICATION_FEATURES_DIFF_LOCK_FRONT,
            self::SPECIFICATION_FEATURES_DIFF_LOCK_CENTRE,
            self::SPECIFICATION_FEATURES_DIFF_LOCK_REAR,
            self::SPECIFICATION_FEATURES_TRACTION_CONTROL,
            self::SPECIFICATION_FEATURES_STABILITY_CONTROL,
            self::SPECIFICATION_FEATURES_HILL_DESCENT_CONTROL,
            self::SPECIFICATION_FEATURES_ALLOY_WHEELS,
            self::SPECIFICATION_FEATURES_TYRE_PRESSURE_SENSOR,
            self::SPECIFICATION_FEATURES_DRIVER_AIRBAG,
            self::SPECIFICATION_FEATURES_FRONT_PASSENGER_AIRBAG,
            self::SPECIFICATION_FEATURES_DRIVER_KNEE_AIRBAG,
            self::SPECIFICATION_FEATURES_PASSENGER_KNEE_AIRBAG,
            self::SPECIFICATION_FEATURES_FRONT_SIDE_AIRBAGS,
            self::SPECIFICATION_FEATURES_REAR_SIDE_AIRBAGS,
            self::SPECIFICATION_FEATURES_CURTAIN_AIRBAGS,
            self::SPECIFICATION_FEATURES_AIR_CONDITIONING,
            self::SPECIFICATION_FEATURES_CLIMATE_CONTROL,
            self::SPECIFICATION_FEATURES_POWER_STEERING,
            self::SPECIFICATION_FEATURES_ELECTRIC_SEERING_COLUMN_ADJUSTMENT,
            self::SPECIFICATION_FEATURES_MULTI_FUNCTION_STEERING_WHEEL_CONTROLS,
            self::SPECIFICATION_FEATURES_LANE_DEPARTURE_WARNING,
            self::SPECIFICATION_FEATURES_LANE_CHANGE_BLIND_SPOT_WARNING,
            self::SPECIFICATION_FEATURES_ATTENTION_ASSIST,
            self::SPECIFICATION_FEATURES_HEAD_UP_DISPLAY,
            self::SPECIFICATION_FEATURES_ONBOARD_COMPUTER,
            self::SPECIFICATION_FEATURES_NAVIGATION,
            self::SPECIFICATION_FEATURES_CRUISE_CONTROL,
            self::SPECIFICATION_FEATURES_ADAPTIVE_CRUISE_CONTROL,
            self::SPECIFICATION_FEATURES_BLUETOOTH_CONNECTIVITY,
            self::SPECIFICATION_FEATURES_VOICE_CONTROL,
            self::SPECIFICATION_FEATURES_CD_PLAYER,
            self::SPECIFICATION_FEATURES_AUX_INPUT,
            self::SPECIFICATION_FEATURES_USB_PORT,
            self::SPECIFICATION_FEATURES_REMOTE_CENTRAL_LOCKING,
            self::SPECIFICATION_FEATURES_KEYLESS_ACCESS_START,
            self::SPECIFICATION_FEATURES_ELECTRIC_WINDOWS,
            self::SPECIFICATION_FEATURES_RAIN_SENSOR,
            self::SPECIFICATION_FEATURES_AUTODIM_INTERIOR_MIRROR,
            self::SPECIFICATION_FEATURES_ELECTRIC_ADJUST_MIRRORS,
            self::SPECIFICATION_FEATURES_AUTODIM_EXTERIOR_MIRRORS,
            self::SPECIFICATION_FEATURES_SUNROOF,
            self::SPECIFICATION_FEATURES_PANORAMIC_ROOF,
            self::SPECIFICATION_FEATURES_CLOTH_UPHOLSTERY,
            self::SPECIFICATION_FEATURES_SUEDE_CLOTH_UPHOLSTERY,
            self::SPECIFICATION_FEATURES_LEATHER_UPHOLSTERY,
            self::SPECIFICATION_FEATURES_HEATED_SEATS_FRONT,
            self::SPECIFICATION_FEATURES_VENTILATED_SEATS_FRONT,
            self::SPECIFICATION_FEATURES_MASSAGING_SEATS_FRONT,
            self::SPECIFICATION_FEATURES_HEATED_SEATS_REAR,
            self::SPECIFICATION_FEATURES_VENTILATED_SEATS_REAR,
            self::SPECIFICATION_FEATURES_MASSAGING_SEATS_REAR,
            self::SPECIFICATION_FEATURES_RUNNING_LIGHTS,
            self::SPECIFICATION_FEATURES_AUTOMATIC_LIGHT_CONTROL,
            self::SPECIFICATION_FEATURES_XENON_HEADLIGHTS,
            self::SPECIFICATION_FEATURES_ADAPTIVE_HEADLIGHTS,
            self::SPECIFICATION_FEATURES_HIGH_BEAM_ASSIST,
            self::SPECIFICATION_FEATURES_FRONT_FOG_LIGHTS,
            self::SPECIFICATION_FEATURES_HIGH_LEVEL_BRAKE_LIGHT,
            self::SPECIFICATION_FEATURES_PARK_DISTANCE_CONTROL_FRONT,
            self::SPECIFICATION_FEATURES_PARK_DISTANCE_CONTROL_REAR,
            self::SPECIFICATION_FEATURES_CAMERA_FOR_PARK_DISTANCE_CONTROL,
            self::SPECIFICATION_FEATURES_SURROUND_VIEW_CAMERAS,
            self::SPECIFICATION_FEATURES_PARK_ASSIST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
            self::STATUS_WITHDRAWN,
            self::STATUS_SOLD,
            self::STATUS_SPEC_CLARIFICATION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransmissionTypeAllowableValues()
    {
        return [
            self::TRANSMISSION_TYPE_MANUAL,
            self::TRANSMISSION_TYPE_AUTOMATIC,
            self::TRANSMISSION_TYPE_SEMI_AUTOMATIC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDriveTypeAllowableValues()
    {
        return [
            self::DRIVE_TYPE__4X2,
            self::DRIVE_TYPE__4X4,
            self::DRIVE_TYPE_ALL_WHEEL_DRIVE,
            self::DRIVE_TYPE_FRONT_WHEEL_DRIVE,
            self::DRIVE_TYPE_REAR_WHEEL_DRIVE,
            self::DRIVE_TYPE_FOUR_WHEEL_DRIVE,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dealer_id'] = isset($data['dealer_id']) ? $data['dealer_id'] : null;
        $this->container['new_used'] = isset($data['new_used']) ? $data['new_used'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['sub_category'] = isset($data['sub_category']) ? $data['sub_category'] : null;
        $this->container['body_type'] = isset($data['body_type']) ? $data['body_type'] : null;
        $this->container['vin'] = isset($data['vin']) ? $data['vin'] : null;
        $this->container['stock_number'] = isset($data['stock_number']) ? $data['stock_number'] : null;
        $this->container['registration_number'] = isset($data['registration_number']) ? $data['registration_number'] : null;
        $this->container['registration_year'] = isset($data['registration_year']) ? $data['registration_year'] : null;
        $this->container['mileage'] = isset($data['mileage']) ? $data['mileage'] : null;
        $this->container['previous_owners'] = isset($data['previous_owners']) ? $data['previous_owners'] : null;
        $this->container['service_history'] = isset($data['service_history']) ? $data['service_history'] : null;
        $this->container['warranty_remaining_in_months'] = isset($data['warranty_remaining_in_months']) ? $data['warranty_remaining_in_months'] : null;
        $this->container['colour'] = isset($data['colour']) ? $data['colour'] : null;
        $this->container['manufacturer_colour'] = isset($data['manufacturer_colour']) ? $data['manufacturer_colour'] : null;
        $this->container['engine_capacity'] = isset($data['engine_capacity']) ? $data['engine_capacity'] : null;
        $this->container['engine_capacity_unit'] = isset($data['engine_capacity_unit']) ? $data['engine_capacity_unit'] : null;
        $this->container['engine_power'] = isset($data['engine_power']) ? $data['engine_power'] : null;
        $this->container['engine_power_unit'] = isset($data['engine_power_unit']) ? $data['engine_power_unit'] : null;
        $this->container['number_of_berths'] = isset($data['number_of_berths']) ? $data['number_of_berths'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['max_payload'] = isset($data['max_payload']) ? $data['max_payload'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['lifting_capacity'] = isset($data['lifting_capacity']) ? $data['lifting_capacity'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['axle_configuration'] = isset($data['axle_configuration']) ? $data['axle_configuration'] : null;
        $this->container['axles'] = isset($data['axles']) ? $data['axles'] : null;
        $this->container['fuel_type'] = isset($data['fuel_type']) ? $data['fuel_type'] : null;
        $this->container['transmission'] = isset($data['transmission']) ? $data['transmission'] : null;
        $this->container['transmission_drive'] = isset($data['transmission_drive']) ? $data['transmission_drive'] : null;
        $this->container['hours_in_operation'] = isset($data['hours_in_operation']) ? $data['hours_in_operation'] : null;
        $this->container['maximum_reach'] = isset($data['maximum_reach']) ? $data['maximum_reach'] : null;
        $this->container['specification_features'] = isset($data['specification_features']) ? $data['specification_features'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['sellers_comments'] = isset($data['sellers_comments']) ? $data['sellers_comments'] : null;
        $this->container['trade_in_price'] = isset($data['trade_in_price']) ? $data['trade_in_price'] : null;
        $this->container['reconditioning_costs'] = isset($data['reconditioning_costs']) ? $data['reconditioning_costs'] : null;
        $this->container['list_price'] = isset($data['list_price']) ? $data['list_price'] : null;
        $this->container['poa'] = isset($data['poa']) ? $data['poa'] : null;
        $this->container['is_featured_listing'] = isset($data['is_featured_listing']) ? $data['is_featured_listing'] : null;
        $this->container['image_urls'] = isset($data['image_urls']) ? $data['image_urls'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['rebuild'] = isset($data['rebuild']) ? $data['rebuild'] : null;
        $this->container['make'] = isset($data['make']) ? $data['make'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['variant'] = isset($data['variant']) ? $data['variant'] : null;
        $this->container['transmission_type'] = isset($data['transmission_type']) ? $data['transmission_type'] : null;
        $this->container['drive_type'] = isset($data['drive_type']) ? $data['drive_type'] : null;
        $this->container['number_of_doors'] = isset($data['number_of_doors']) ? $data['number_of_doors'] : null;
        $this->container['introduction_date'] = isset($data['introduction_date']) ? $data['introduction_date'] : null;
        $this->container['discontinued_date'] = isset($data['discontinued_date']) ? $data['discontinued_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dealer_id'] === null) {
            $invalidProperties[] = "'dealer_id' can't be null";
        }
        $allowedValues = $this->getNewUsedAllowableValues();
        if (!is_null($this->container['new_used']) && !in_array($this->container['new_used'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'new_used', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubCategoryAllowableValues();
        if (!is_null($this->container['sub_category']) && !in_array($this->container['sub_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sub_category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBodyTypeAllowableValues();
        if (!is_null($this->container['body_type']) && !in_array($this->container['body_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'body_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getServiceHistoryAllowableValues();
        if (!is_null($this->container['service_history']) && !in_array($this->container['service_history'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'service_history', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getColourAllowableValues();
        if (!is_null($this->container['colour']) && !in_array($this->container['colour'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'colour', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEngineCapacityUnitAllowableValues();
        if (!is_null($this->container['engine_capacity_unit']) && !in_array($this->container['engine_capacity_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'engine_capacity_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnginePowerUnitAllowableValues();
        if (!is_null($this->container['engine_power_unit']) && !in_array($this->container['engine_power_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'engine_power_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAxleConfigurationAllowableValues();
        if (!is_null($this->container['axle_configuration']) && !in_array($this->container['axle_configuration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'axle_configuration', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFuelTypeAllowableValues();
        if (!is_null($this->container['fuel_type']) && !in_array($this->container['fuel_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fuel_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransmissionAllowableValues();
        if (!is_null($this->container['transmission']) && !in_array($this->container['transmission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transmission', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransmissionDriveAllowableValues();
        if (!is_null($this->container['transmission_drive']) && !in_array($this->container['transmission_drive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transmission_drive', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransmissionTypeAllowableValues();
        if (!is_null($this->container['transmission_type']) && !in_array($this->container['transmission_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transmission_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDriveTypeAllowableValues();
        if (!is_null($this->container['drive_type']) && !in_array($this->container['drive_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'drive_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dealer_id
     *
     * @return int
     */
    public function getDealerId()
    {
        return $this->container['dealer_id'];
    }

    /**
     * Sets dealer_id
     *
     * @param int $dealer_id dealer_id
     *
     * @return $this
     */
    public function setDealerId($dealer_id)
    {
        $this->container['dealer_id'] = $dealer_id;

        return $this;
    }

    /**
     * Gets new_used
     *
     * @return string
     */
    public function getNewUsed()
    {
        return $this->container['new_used'];
    }

    /**
     * Sets new_used
     *
     * @param string $new_used new_used
     *
     * @return $this
     */
    public function setNewUsed($new_used)
    {
        $allowedValues = $this->getNewUsedAllowableValues();
        if (!is_null($new_used) && !in_array($new_used, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'new_used', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['new_used'] = $new_used;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (!in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets sub_category
     *
     * @return string
     */
    public function getSubCategory()
    {
        return $this->container['sub_category'];
    }

    /**
     * Sets sub_category
     *
     * @param string $sub_category sub_category
     *
     * @return $this
     */
    public function setSubCategory($sub_category)
    {
        $allowedValues = $this->getSubCategoryAllowableValues();
        if (!is_null($sub_category) && !in_array($sub_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sub_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sub_category'] = $sub_category;

        return $this;
    }

    /**
     * Gets body_type
     *
     * @return string
     */
    public function getBodyType()
    {
        return $this->container['body_type'];
    }

    /**
     * Sets body_type
     *
     * @param string $body_type body_type
     *
     * @return $this
     */
    public function setBodyType($body_type)
    {
        $allowedValues = $this->getBodyTypeAllowableValues();
        if (!is_null($body_type) && !in_array($body_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'body_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['body_type'] = $body_type;

        return $this;
    }

    /**
     * Gets vin
     *
     * @return string
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     *
     * @param string $vin vin
     *
     * @return $this
     */
    public function setVin($vin)
    {
        $this->container['vin'] = $vin;

        return $this;
    }

    /**
     * Gets stock_number
     *
     * @return string
     */
    public function getStockNumber()
    {
        return $this->container['stock_number'];
    }

    /**
     * Sets stock_number
     *
     * @param string $stock_number stock_number
     *
     * @return $this
     */
    public function setStockNumber($stock_number)
    {
        $this->container['stock_number'] = $stock_number;

        return $this;
    }

    /**
     * Gets registration_number
     *
     * @return string
     */
    public function getRegistrationNumber()
    {
        return $this->container['registration_number'];
    }

    /**
     * Sets registration_number
     *
     * @param string $registration_number registration_number
     *
     * @return $this
     */
    public function setRegistrationNumber($registration_number)
    {
        $this->container['registration_number'] = $registration_number;

        return $this;
    }

    /**
     * Gets registration_year
     *
     * @return int
     */
    public function getRegistrationYear()
    {
        return $this->container['registration_year'];
    }

    /**
     * Sets registration_year
     *
     * @param int $registration_year registration_year
     *
     * @return $this
     */
    public function setRegistrationYear($registration_year)
    {
        $this->container['registration_year'] = $registration_year;

        return $this;
    }

    /**
     * Gets mileage
     *
     * @return int
     */
    public function getMileage()
    {
        return $this->container['mileage'];
    }

    /**
     * Sets mileage
     *
     * @param int $mileage mileage
     *
     * @return $this
     */
    public function setMileage($mileage)
    {
        $this->container['mileage'] = $mileage;

        return $this;
    }

    /**
     * Gets previous_owners
     *
     * @return int
     */
    public function getPreviousOwners()
    {
        return $this->container['previous_owners'];
    }

    /**
     * Sets previous_owners
     *
     * @param int $previous_owners previous_owners
     *
     * @return $this
     */
    public function setPreviousOwners($previous_owners)
    {
        $this->container['previous_owners'] = $previous_owners;

        return $this;
    }

    /**
     * Gets service_history
     *
     * @return string
     */
    public function getServiceHistory()
    {
        return $this->container['service_history'];
    }

    /**
     * Sets service_history
     *
     * @param string $service_history service_history
     *
     * @return $this
     */
    public function setServiceHistory($service_history)
    {
        $allowedValues = $this->getServiceHistoryAllowableValues();
        if (!is_null($service_history) && !in_array($service_history, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_history', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_history'] = $service_history;

        return $this;
    }

    /**
     * Gets warranty_remaining_in_months
     *
     * @return int
     */
    public function getWarrantyRemainingInMonths()
    {
        return $this->container['warranty_remaining_in_months'];
    }

    /**
     * Sets warranty_remaining_in_months
     *
     * @param int $warranty_remaining_in_months warranty_remaining_in_months
     *
     * @return $this
     */
    public function setWarrantyRemainingInMonths($warranty_remaining_in_months)
    {
        $this->container['warranty_remaining_in_months'] = $warranty_remaining_in_months;

        return $this;
    }

    /**
     * Gets colour
     *
     * @return string
     */
    public function getColour()
    {
        return $this->container['colour'];
    }

    /**
     * Sets colour
     *
     * @param string $colour colour
     *
     * @return $this
     */
    public function setColour($colour)
    {
        $allowedValues = $this->getColourAllowableValues();
        if (!is_null($colour) && !in_array($colour, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'colour', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['colour'] = $colour;

        return $this;
    }

    /**
     * Gets manufacturer_colour
     *
     * @return string
     */
    public function getManufacturerColour()
    {
        return $this->container['manufacturer_colour'];
    }

    /**
     * Sets manufacturer_colour
     *
     * @param string $manufacturer_colour manufacturer_colour
     *
     * @return $this
     */
    public function setManufacturerColour($manufacturer_colour)
    {
        $this->container['manufacturer_colour'] = $manufacturer_colour;

        return $this;
    }

    /**
     * Gets engine_capacity
     *
     * @return double
     */
    public function getEngineCapacity()
    {
        return $this->container['engine_capacity'];
    }

    /**
     * Sets engine_capacity
     *
     * @param double $engine_capacity engine_capacity
     *
     * @return $this
     */
    public function setEngineCapacity($engine_capacity)
    {
        $this->container['engine_capacity'] = $engine_capacity;

        return $this;
    }

    /**
     * Gets engine_capacity_unit
     *
     * @return string
     */
    public function getEngineCapacityUnit()
    {
        return $this->container['engine_capacity_unit'];
    }

    /**
     * Sets engine_capacity_unit
     *
     * @param string $engine_capacity_unit engine_capacity_unit
     *
     * @return $this
     */
    public function setEngineCapacityUnit($engine_capacity_unit)
    {
        $allowedValues = $this->getEngineCapacityUnitAllowableValues();
        if (!is_null($engine_capacity_unit) && !in_array($engine_capacity_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'engine_capacity_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['engine_capacity_unit'] = $engine_capacity_unit;

        return $this;
    }

    /**
     * Gets engine_power
     *
     * @return double
     */
    public function getEnginePower()
    {
        return $this->container['engine_power'];
    }

    /**
     * Sets engine_power
     *
     * @param double $engine_power engine_power
     *
     * @return $this
     */
    public function setEnginePower($engine_power)
    {
        $this->container['engine_power'] = $engine_power;

        return $this;
    }

    /**
     * Gets engine_power_unit
     *
     * @return string
     */
    public function getEnginePowerUnit()
    {
        return $this->container['engine_power_unit'];
    }

    /**
     * Sets engine_power_unit
     *
     * @param string $engine_power_unit engine_power_unit
     *
     * @return $this
     */
    public function setEnginePowerUnit($engine_power_unit)
    {
        $allowedValues = $this->getEnginePowerUnitAllowableValues();
        if (!is_null($engine_power_unit) && !in_array($engine_power_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'engine_power_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['engine_power_unit'] = $engine_power_unit;

        return $this;
    }

    /**
     * Gets number_of_berths
     *
     * @return int
     */
    public function getNumberOfBerths()
    {
        return $this->container['number_of_berths'];
    }

    /**
     * Sets number_of_berths
     *
     * @param int $number_of_berths number_of_berths
     *
     * @return $this
     */
    public function setNumberOfBerths($number_of_berths)
    {
        $this->container['number_of_berths'] = $number_of_berths;

        return $this;
    }

    /**
     * Gets length
     *
     * @return double
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param double $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets max_payload
     *
     * @return int
     */
    public function getMaxPayload()
    {
        return $this->container['max_payload'];
    }

    /**
     * Sets max_payload
     *
     * @param int $max_payload max_payload
     *
     * @return $this
     */
    public function setMaxPayload($max_payload)
    {
        $this->container['max_payload'] = $max_payload;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets lifting_capacity
     *
     * @return int
     */
    public function getLiftingCapacity()
    {
        return $this->container['lifting_capacity'];
    }

    /**
     * Sets lifting_capacity
     *
     * @param int $lifting_capacity lifting_capacity
     *
     * @return $this
     */
    public function setLiftingCapacity($lifting_capacity)
    {
        $this->container['lifting_capacity'] = $lifting_capacity;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return double
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param double $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets axle_configuration
     *
     * @return string
     */
    public function getAxleConfiguration()
    {
        return $this->container['axle_configuration'];
    }

    /**
     * Sets axle_configuration
     *
     * @param string $axle_configuration axle_configuration
     *
     * @return $this
     */
    public function setAxleConfiguration($axle_configuration)
    {
        $allowedValues = $this->getAxleConfigurationAllowableValues();
        if (!is_null($axle_configuration) && !in_array($axle_configuration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'axle_configuration', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['axle_configuration'] = $axle_configuration;

        return $this;
    }

    /**
     * Gets axles
     *
     * @return int
     */
    public function getAxles()
    {
        return $this->container['axles'];
    }

    /**
     * Sets axles
     *
     * @param int $axles axles
     *
     * @return $this
     */
    public function setAxles($axles)
    {
        $this->container['axles'] = $axles;

        return $this;
    }

    /**
     * Gets fuel_type
     *
     * @return string
     */
    public function getFuelType()
    {
        return $this->container['fuel_type'];
    }

    /**
     * Sets fuel_type
     *
     * @param string $fuel_type fuel_type
     *
     * @return $this
     */
    public function setFuelType($fuel_type)
    {
        $allowedValues = $this->getFuelTypeAllowableValues();
        if (!is_null($fuel_type) && !in_array($fuel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fuel_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fuel_type'] = $fuel_type;

        return $this;
    }

    /**
     * Gets transmission
     *
     * @return string
     */
    public function getTransmission()
    {
        return $this->container['transmission'];
    }

    /**
     * Sets transmission
     *
     * @param string $transmission transmission
     *
     * @return $this
     */
    public function setTransmission($transmission)
    {
        $allowedValues = $this->getTransmissionAllowableValues();
        if (!is_null($transmission) && !in_array($transmission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transmission', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transmission'] = $transmission;

        return $this;
    }

    /**
     * Gets transmission_drive
     *
     * @return string
     */
    public function getTransmissionDrive()
    {
        return $this->container['transmission_drive'];
    }

    /**
     * Sets transmission_drive
     *
     * @param string $transmission_drive transmission_drive
     *
     * @return $this
     */
    public function setTransmissionDrive($transmission_drive)
    {
        $allowedValues = $this->getTransmissionDriveAllowableValues();
        if (!is_null($transmission_drive) && !in_array($transmission_drive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transmission_drive', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transmission_drive'] = $transmission_drive;

        return $this;
    }

    /**
     * Gets hours_in_operation
     *
     * @return int
     */
    public function getHoursInOperation()
    {
        return $this->container['hours_in_operation'];
    }

    /**
     * Sets hours_in_operation
     *
     * @param int $hours_in_operation hours_in_operation
     *
     * @return $this
     */
    public function setHoursInOperation($hours_in_operation)
    {
        $this->container['hours_in_operation'] = $hours_in_operation;

        return $this;
    }

    /**
     * Gets maximum_reach
     *
     * @return double
     */
    public function getMaximumReach()
    {
        return $this->container['maximum_reach'];
    }

    /**
     * Sets maximum_reach
     *
     * @param double $maximum_reach maximum_reach
     *
     * @return $this
     */
    public function setMaximumReach($maximum_reach)
    {
        $this->container['maximum_reach'] = $maximum_reach;

        return $this;
    }

    /**
     * Gets specification_features
     *
     * @return string[]
     */
    public function getSpecificationFeatures()
    {
        return $this->container['specification_features'];
    }

    /**
     * Sets specification_features
     *
     * @param string[] $specification_features specification_features
     *
     * @return $this
     */
    public function setSpecificationFeatures($specification_features)
    {
        $allowedValues = $this->getSpecificationFeaturesAllowableValues();
        if (!is_null($specification_features) && array_diff($specification_features, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'specification_features', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['specification_features'] = $specification_features;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets sellers_comments
     *
     * @return string
     */
    public function getSellersComments()
    {
        return $this->container['sellers_comments'];
    }

    /**
     * Sets sellers_comments
     *
     * @param string $sellers_comments sellers_comments
     *
     * @return $this
     */
    public function setSellersComments($sellers_comments)
    {
        $this->container['sellers_comments'] = $sellers_comments;

        return $this;
    }

    /**
     * Gets trade_in_price
     *
     * @return int
     */
    public function getTradeInPrice()
    {
        return $this->container['trade_in_price'];
    }

    /**
     * Sets trade_in_price
     *
     * @param int $trade_in_price trade_in_price
     *
     * @return $this
     */
    public function setTradeInPrice($trade_in_price)
    {
        $this->container['trade_in_price'] = $trade_in_price;

        return $this;
    }

    /**
     * Gets reconditioning_costs
     *
     * @return int
     */
    public function getReconditioningCosts()
    {
        return $this->container['reconditioning_costs'];
    }

    /**
     * Sets reconditioning_costs
     *
     * @param int $reconditioning_costs reconditioning_costs
     *
     * @return $this
     */
    public function setReconditioningCosts($reconditioning_costs)
    {
        $this->container['reconditioning_costs'] = $reconditioning_costs;

        return $this;
    }

    /**
     * Gets list_price
     *
     * @return int
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param int $list_price list_price
     *
     * @return $this
     */
    public function setListPrice($list_price)
    {
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets poa
     *
     * @return bool
     */
    public function getPoa()
    {
        return $this->container['poa'];
    }

    /**
     * Sets poa
     *
     * @param bool $poa poa
     *
     * @return $this
     */
    public function setPoa($poa)
    {
        $this->container['poa'] = $poa;

        return $this;
    }

    /**
     * Gets is_featured_listing
     *
     * @return bool
     */
    public function getIsFeaturedListing()
    {
        return $this->container['is_featured_listing'];
    }

    /**
     * Sets is_featured_listing
     *
     * @param bool $is_featured_listing is_featured_listing
     *
     * @return $this
     */
    public function setIsFeaturedListing($is_featured_listing)
    {
        $this->container['is_featured_listing'] = $is_featured_listing;

        return $this;
    }

    /**
     * Gets image_urls
     *
     * @return string[]
     */
    public function getImageUrls()
    {
        return $this->container['image_urls'];
    }

    /**
     * Sets image_urls
     *
     * @param string[] $image_urls image_urls
     *
     * @return $this
     */
    public function setImageUrls($image_urls)
    {
        $this->container['image_urls'] = $image_urls;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets rebuild
     *
     * @return bool
     */
    public function getRebuild()
    {
        return $this->container['rebuild'];
    }

    /**
     * Sets rebuild
     *
     * @param bool $rebuild rebuild
     *
     * @return $this
     */
    public function setRebuild($rebuild)
    {
        $this->container['rebuild'] = $rebuild;

        return $this;
    }

    /**
     * Gets make
     *
     * @return string
     */
    public function getMake()
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param string $make make
     *
     * @return $this
     */
    public function setMake($make)
    {
        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets variant
     *
     * @return string
     */
    public function getVariant()
    {
        return $this->container['variant'];
    }

    /**
     * Sets variant
     *
     * @param string $variant variant
     *
     * @return $this
     */
    public function setVariant($variant)
    {
        $this->container['variant'] = $variant;

        return $this;
    }

    /**
     * Gets transmission_type
     *
     * @return string
     */
    public function getTransmissionType()
    {
        return $this->container['transmission_type'];
    }

    /**
     * Sets transmission_type
     *
     * @param string $transmission_type transmission_type
     *
     * @return $this
     */
    public function setTransmissionType($transmission_type)
    {
        $allowedValues = $this->getTransmissionTypeAllowableValues();
        if (!is_null($transmission_type) && !in_array($transmission_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transmission_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transmission_type'] = $transmission_type;

        return $this;
    }

    /**
     * Gets drive_type
     *
     * @return string
     */
    public function getDriveType()
    {
        return $this->container['drive_type'];
    }

    /**
     * Sets drive_type
     *
     * @param string $drive_type drive_type
     *
     * @return $this
     */
    public function setDriveType($drive_type)
    {
        $allowedValues = $this->getDriveTypeAllowableValues();
        if (!is_null($drive_type) && !in_array($drive_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'drive_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drive_type'] = $drive_type;

        return $this;
    }

    /**
     * Gets number_of_doors
     *
     * @return int
     */
    public function getNumberOfDoors()
    {
        return $this->container['number_of_doors'];
    }

    /**
     * Sets number_of_doors
     *
     * @param int $number_of_doors number_of_doors
     *
     * @return $this
     */
    public function setNumberOfDoors($number_of_doors)
    {
        $this->container['number_of_doors'] = $number_of_doors;

        return $this;
    }

    /**
     * Gets introduction_date
     *
     * @return \DateTime
     */
    public function getIntroductionDate()
    {
        return $this->container['introduction_date'];
    }

    /**
     * Sets introduction_date
     *
     * @param \DateTime $introduction_date introduction_date
     *
     * @return $this
     */
    public function setIntroductionDate($introduction_date)
    {
        $this->container['introduction_date'] = $introduction_date;

        return $this;
    }

    /**
     * Gets discontinued_date
     *
     * @return \DateTime
     */
    public function getDiscontinuedDate()
    {
        return $this->container['discontinued_date'];
    }

    /**
     * Sets discontinued_date
     *
     * @param \DateTime $discontinued_date discontinued_date
     *
     * @return $this
     */
    public function setDiscontinuedDate($discontinued_date)
    {
        $this->container['discontinued_date'] = $discontinued_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


